/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fcomponents%2FSpeechSetup.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fpage.client.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fscript.js&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fshared%2Flib%2Flazy-dynamic%2Fdynamic-bailout-to-csr.js&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fcomponents%2FSpeechSetup.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fpage.client.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fscript.js&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fshared%2Flib%2Flazy-dynamic%2Fdynamic-bailout-to-csr.js&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/components/SpeechSetup.tsx */ \"(app-pages-browser)/./app/components/SpeechSetup.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.client.tsx */ \"(app-pages-browser)/./app/page.client.tsx\"));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/dist/client/script.js */ \"(app-pages-browser)/./node_modules/next/dist/client/script.js\", 23));\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRnNhbnRvc2hiYXJhbCUyRkRvY3VtZW50cyUyRlJFVlglMkZoZWxwZGV4JTJGc3B1LWFpJTJGYXBwJTJGY29tcG9uZW50cyUyRlNwZWVjaFNldHVwLnRzeCZtb2R1bGVzPSUyRlVzZXJzJTJGc2FudG9zaGJhcmFsJTJGRG9jdW1lbnRzJTJGUkVWWCUyRmhlbHBkZXglMkZzcHUtYWklMkZhcHAlMkZwYWdlLmNsaWVudC50c3gmbW9kdWxlcz0lMkZVc2VycyUyRnNhbnRvc2hiYXJhbCUyRkRvY3VtZW50cyUyRlJFVlglMkZoZWxwZGV4JTJGc3B1LWFpJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZjbGllbnQlMkZzY3JpcHQuanMmbW9kdWxlcz0lMkZVc2VycyUyRnNhbnRvc2hiYXJhbCUyRkRvY3VtZW50cyUyRlJFVlglMkZoZWxwZGV4JTJGc3B1LWFpJTJGbm9kZV9tb2R1bGVzJTJGbmV4dCUyRmRpc3QlMkZzaGFyZWQlMkZsaWIlMkZsYXp5LWR5bmFtaWMlMkZkeW5hbWljLWJhaWxvdXQtdG8tY3NyLmpzJnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEsMExBQXFIO0FBQ3JILG9LQUEwRztBQUMxRyxrTkFBOEg7QUFDOUgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9kMDY2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3NhbnRvc2hiYXJhbC9Eb2N1bWVudHMvUkVWWC9oZWxwZGV4L3NwdS1haS9hcHAvY29tcG9uZW50cy9TcGVlY2hTZXR1cC50c3hcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9zYW50b3NoYmFyYWwvRG9jdW1lbnRzL1JFVlgvaGVscGRleC9zcHUtYWkvYXBwL3BhZ2UuY2xpZW50LnRzeFwiKTtcbmltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3NhbnRvc2hiYXJhbC9Eb2N1bWVudHMvUkVWWC9oZWxwZGV4L3NwdS1haS9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9zY3JpcHQuanNcIik7XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy9zYW50b3NoYmFyYWwvRG9jdW1lbnRzL1JFVlgvaGVscGRleC9zcHUtYWkvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9zaGFyZWQvbGliL2xhenktZHluYW1pYy9keW5hbWljLWJhaWxvdXQtdG8tY3NyLmpzXCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fcomponents%2FSpeechSetup.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fpage.client.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fscript.js&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fshared%2Flib%2Flazy-dynamic%2Fdynamic-bailout-to-csr.js&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/copy-to-clipboard/index.js":
/*!*************************************************!*\
  !*** ./node_modules/copy-to-clipboard/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nvar deselectCurrent = __webpack_require__(/*! toggle-selection */ \"(app-pages-browser)/./node_modules/toggle-selection/index.js\");\nvar clipboardToIE11Formatting = {\n    \"text/plain\": \"Text\",\n    \"text/html\": \"Url\",\n    \"default\": \"Text\"\n};\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\nfunction format(message) {\n    var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"âŒ˜\" : \"Ctrl\") + \"+C\";\n    return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\nfunction copy(text, options) {\n    var debug, message, reselectPrevious, range, selection, mark, success = false;\n    if (!options) {\n        options = {};\n    }\n    debug = options.debug || false;\n    try {\n        reselectPrevious = deselectCurrent();\n        range = document.createRange();\n        selection = document.getSelection();\n        mark = document.createElement(\"span\");\n        mark.textContent = text;\n        // avoid screen readers from reading out loud the text\n        mark.ariaHidden = \"true\";\n        // reset user styles for span element\n        mark.style.all = \"unset\";\n        // prevents scrolling to the end of the page\n        mark.style.position = \"fixed\";\n        mark.style.top = 0;\n        mark.style.clip = \"rect(0, 0, 0, 0)\";\n        // used to preserve spaces and line breaks\n        mark.style.whiteSpace = \"pre\";\n        // do not inherit user-select (it may be `none`)\n        mark.style.webkitUserSelect = \"text\";\n        mark.style.MozUserSelect = \"text\";\n        mark.style.msUserSelect = \"text\";\n        mark.style.userSelect = \"text\";\n        mark.addEventListener(\"copy\", function(e) {\n            e.stopPropagation();\n            if (options.format) {\n                e.preventDefault();\n                if (typeof e.clipboardData === \"undefined\") {\n                    debug && console.warn(\"unable to use e.clipboardData\");\n                    debug && console.warn(\"trying IE specific stuff\");\n                    window.clipboardData.clearData();\n                    var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"];\n                    window.clipboardData.setData(format, text);\n                } else {\n                    e.clipboardData.clearData();\n                    e.clipboardData.setData(options.format, text);\n                }\n            }\n            if (options.onCopy) {\n                e.preventDefault();\n                options.onCopy(e.clipboardData);\n            }\n        });\n        document.body.appendChild(mark);\n        range.selectNodeContents(mark);\n        selection.addRange(range);\n        var successful = document.execCommand(\"copy\");\n        if (!successful) {\n            throw new Error(\"copy command was unsuccessful\");\n        }\n        success = true;\n    } catch (err) {\n        debug && console.error(\"unable to copy using execCommand: \", err);\n        debug && console.warn(\"trying IE specific stuff\");\n        try {\n            window.clipboardData.setData(options.format || \"text\", text);\n            options.onCopy && options.onCopy(window.clipboardData);\n            success = true;\n        } catch (err) {\n            debug && console.error(\"unable to copy using clipboardData: \", err);\n            debug && console.error(\"falling back to prompt\");\n            message = format(\"message\" in options ? options.message : defaultMessage);\n            window.prompt(message, text);\n        }\n    } finally{\n        if (selection) {\n            if (typeof selection.removeRange == \"function\") {\n                selection.removeRange(range);\n            } else {\n                selection.removeAllRanges();\n            }\n        }\n        if (mark) {\n            document.body.removeChild(mark);\n        }\n        reselectPrevious();\n    }\n    return success;\n}\nmodule.exports = copy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/copy-to-clipboard/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.isNative = void 0;\nvar NativeSpeechRecognition =  true && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);\nvar isNative = function isNative(SpeechRecognition) {\n    return SpeechRecognition === NativeSpeechRecognition;\n};\nexports.isNative = isNative;\nvar _default = NativeSpeechRecognition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL05hdGl2ZVNwZWVjaFJlY29nbml0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBa0IsR0FBR0EsZ0JBQWdCLEdBQUcsS0FBSztBQUM3QyxJQUFJRywwQkFBMEIsS0FBa0IsSUFBZ0JDLENBQUFBLE9BQU9DLGlCQUFpQixJQUFJRCxPQUFPRSx1QkFBdUIsSUFBSUYsT0FBT0csb0JBQW9CLElBQUlILE9BQU9JLG1CQUFtQixJQUFJSixPQUFPSyxrQkFBa0I7QUFFcE4sSUFBSVAsV0FBVyxTQUFTQSxTQUFTRyxpQkFBaUI7SUFDaEQsT0FBT0Esc0JBQXNCRjtBQUMvQjtBQUVBSCxnQkFBZ0IsR0FBR0U7QUFDbkIsSUFBSVEsV0FBV1A7QUFDZkgsa0JBQWtCLEdBQUdVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL05hdGl2ZVNwZWVjaFJlY29nbml0aW9uLmpzP2IyYjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuaXNOYXRpdmUgPSB2b2lkIDA7XG52YXIgTmF0aXZlU3BlZWNoUmVjb2duaXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAod2luZG93LlNwZWVjaFJlY29nbml0aW9uIHx8IHdpbmRvdy53ZWJraXRTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cubW96U3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93Lm1zU3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93Lm9TcGVlY2hSZWNvZ25pdGlvbik7XG5cbnZhciBpc05hdGl2ZSA9IGZ1bmN0aW9uIGlzTmF0aXZlKFNwZWVjaFJlY29nbml0aW9uKSB7XG4gIHJldHVybiBTcGVlY2hSZWNvZ25pdGlvbiA9PT0gTmF0aXZlU3BlZWNoUmVjb2duaXRpb247XG59O1xuXG5leHBvcnRzLmlzTmF0aXZlID0gaXNOYXRpdmU7XG52YXIgX2RlZmF1bHQgPSBOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNOYXRpdmUiLCJOYXRpdmVTcGVlY2hSZWNvZ25pdGlvbiIsIndpbmRvdyIsIlNwZWVjaFJlY29nbml0aW9uIiwid2Via2l0U3BlZWNoUmVjb2duaXRpb24iLCJtb3pTcGVlY2hSZWNvZ25pdGlvbiIsIm1zU3BlZWNoUmVjb2duaXRpb24iLCJvU3BlZWNoUmVjb2duaXRpb24iLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/RecognitionManager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/RecognitionManager.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/isAndroid.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar _NativeSpeechRecognition = __webpack_require__(/*! ./NativeSpeechRecognition */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nvar RecognitionManager = /*#__PURE__*/ function() {\n    function RecognitionManager(SpeechRecognition) {\n        _classCallCheck(this, RecognitionManager);\n        this.recognition = null;\n        this.pauseAfterDisconnect = false;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        this.listening = false;\n        this.isMicrophoneAvailable = true;\n        this.subscribers = {};\n        this.onStopListening = function() {};\n        this.previousResultWasFinalOnly = false;\n        this.resetTranscript = this.resetTranscript.bind(this);\n        this.startListening = this.startListening.bind(this);\n        this.stopListening = this.stopListening.bind(this);\n        this.abortListening = this.abortListening.bind(this);\n        this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n        this.disableRecognition = this.disableRecognition.bind(this);\n        this.setSpeechRecognition(SpeechRecognition);\n        if ((0, _isAndroid[\"default\"])()) {\n            this.updateFinalTranscript = (0, _utils.debounce)(this.updateFinalTranscript, 250, true);\n        }\n    }\n    _createClass(RecognitionManager, [\n        {\n            key: \"setSpeechRecognition\",\n            value: function setSpeechRecognition(SpeechRecognition) {\n                var browserSupportsRecogniser = !!SpeechRecognition && ((0, _NativeSpeechRecognition.isNative)(SpeechRecognition) || (0, _utils.browserSupportsPolyfills)());\n                if (browserSupportsRecogniser) {\n                    this.disableRecognition();\n                    this.recognition = new SpeechRecognition();\n                    this.recognition.continuous = false;\n                    this.recognition.interimResults = true;\n                    this.recognition.onresult = this.updateTranscript.bind(this);\n                    this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n                    this.recognition.onerror = this.onError.bind(this);\n                }\n                this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n            }\n        },\n        {\n            key: \"subscribe\",\n            value: function subscribe(id, callbacks) {\n                this.subscribers[id] = callbacks;\n            }\n        },\n        {\n            key: \"unsubscribe\",\n            value: function unsubscribe(id) {\n                delete this.subscribers[id];\n            }\n        },\n        {\n            key: \"emitListeningChange\",\n            value: function emitListeningChange(listening) {\n                var _this = this;\n                this.listening = listening;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onListeningChange = _this.subscribers[id].onListeningChange;\n                    onListeningChange(listening);\n                });\n            }\n        },\n        {\n            key: \"emitMicrophoneAvailabilityChange\",\n            value: function emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n                var _this2 = this;\n                this.isMicrophoneAvailable = isMicrophoneAvailable;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onMicrophoneAvailabilityChange = _this2.subscribers[id].onMicrophoneAvailabilityChange;\n                    onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n                });\n            }\n        },\n        {\n            key: \"emitTranscriptChange\",\n            value: function emitTranscriptChange(interimTranscript, finalTranscript) {\n                var _this3 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onTranscriptChange = _this3.subscribers[id].onTranscriptChange;\n                    onTranscriptChange(interimTranscript, finalTranscript);\n                });\n            }\n        },\n        {\n            key: \"emitClearTranscript\",\n            value: function emitClearTranscript() {\n                var _this4 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var onClearTranscript = _this4.subscribers[id].onClearTranscript;\n                    onClearTranscript();\n                });\n            }\n        },\n        {\n            key: \"emitBrowserSupportsSpeechRecognitionChange\",\n            value: function emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n                var _this5 = this;\n                Object.keys(this.subscribers).forEach(function(id) {\n                    var _this5$subscribers$id = _this5.subscribers[id], onBrowserSupportsSpeechRecognitionChange = _this5$subscribers$id.onBrowserSupportsSpeechRecognitionChange, onBrowserSupportsContinuousListeningChange = _this5$subscribers$id.onBrowserSupportsContinuousListeningChange;\n                    onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n                    onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n                });\n            }\n        },\n        {\n            key: \"disconnect\",\n            value: function disconnect(disconnectType) {\n                if (this.recognition && this.listening) {\n                    switch(disconnectType){\n                        case \"ABORT\":\n                            this.pauseAfterDisconnect = true;\n                            this.abort();\n                            break;\n                        case \"RESET\":\n                            this.pauseAfterDisconnect = false;\n                            this.abort();\n                            break;\n                        case \"STOP\":\n                        default:\n                            this.pauseAfterDisconnect = true;\n                            this.stop();\n                    }\n                }\n            }\n        },\n        {\n            key: \"disableRecognition\",\n            value: function disableRecognition() {\n                if (this.recognition) {\n                    this.recognition.onresult = function() {};\n                    this.recognition.onend = function() {};\n                    this.recognition.onerror = function() {};\n                    if (this.listening) {\n                        this.stopListening();\n                    }\n                }\n            }\n        },\n        {\n            key: \"onError\",\n            value: function onError(event) {\n                if (event && event.error && event.error === \"not-allowed\") {\n                    this.emitMicrophoneAvailabilityChange(false);\n                    this.disableRecognition();\n                }\n            }\n        },\n        {\n            key: \"onRecognitionDisconnect\",\n            value: function onRecognitionDisconnect() {\n                this.onStopListening();\n                this.listening = false;\n                if (this.pauseAfterDisconnect) {\n                    this.emitListeningChange(false);\n                } else if (this.recognition) {\n                    if (this.recognition.continuous) {\n                        this.startListening({\n                            continuous: this.recognition.continuous\n                        });\n                    } else {\n                        this.emitListeningChange(false);\n                    }\n                }\n                this.pauseAfterDisconnect = false;\n            }\n        },\n        {\n            key: \"updateTranscript\",\n            value: function updateTranscript(_ref) {\n                var results = _ref.results, resultIndex = _ref.resultIndex;\n                var currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n                this.interimTranscript = \"\";\n                this.finalTranscript = \"\";\n                for(var i = currentIndex; i < results.length; ++i){\n                    if (results[i].isFinal && (!(0, _isAndroid[\"default\"])() || results[i][0].confidence > 0)) {\n                        this.updateFinalTranscript(results[i][0].transcript);\n                    } else {\n                        this.interimTranscript = (0, _utils.concatTranscripts)(this.interimTranscript, results[i][0].transcript);\n                    }\n                }\n                var isDuplicateResult = false;\n                if (this.interimTranscript === \"\" && this.finalTranscript !== \"\") {\n                    if (this.previousResultWasFinalOnly) {\n                        isDuplicateResult = true;\n                    }\n                    this.previousResultWasFinalOnly = true;\n                } else {\n                    this.previousResultWasFinalOnly = false;\n                }\n                if (!isDuplicateResult) {\n                    this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n                }\n            }\n        },\n        {\n            key: \"updateFinalTranscript\",\n            value: function updateFinalTranscript(newFinalTranscript) {\n                this.finalTranscript = (0, _utils.concatTranscripts)(this.finalTranscript, newFinalTranscript);\n            }\n        },\n        {\n            key: \"resetTranscript\",\n            value: function resetTranscript() {\n                this.disconnect(\"RESET\");\n            }\n        },\n        {\n            key: \"startListening\",\n            value: function() {\n                var _startListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n                    var _ref2, _ref2$continuous, continuous, language, isContinuousChanged, isLanguageChanged, _args = arguments;\n                    return regeneratorRuntime.wrap(function _callee$(_context) {\n                        while(1){\n                            switch(_context.prev = _context.next){\n                                case 0:\n                                    _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref2$continuous = _ref2.continuous, continuous = _ref2$continuous === void 0 ? false : _ref2$continuous, language = _ref2.language;\n                                    if (this.recognition) {\n                                        _context.next = 3;\n                                        break;\n                                    }\n                                    return _context.abrupt(\"return\");\n                                case 3:\n                                    isContinuousChanged = continuous !== this.recognition.continuous;\n                                    isLanguageChanged = language && language !== this.recognition.lang;\n                                    if (!(isContinuousChanged || isLanguageChanged)) {\n                                        _context.next = 11;\n                                        break;\n                                    }\n                                    if (!this.listening) {\n                                        _context.next = 9;\n                                        break;\n                                    }\n                                    _context.next = 9;\n                                    return this.stopListening();\n                                case 9:\n                                    this.recognition.continuous = isContinuousChanged ? continuous : this.recognition.continuous;\n                                    this.recognition.lang = isLanguageChanged ? language : this.recognition.lang;\n                                case 11:\n                                    if (this.listening) {\n                                        _context.next = 22;\n                                        break;\n                                    }\n                                    if (!this.recognition.continuous) {\n                                        this.resetTranscript();\n                                        this.emitClearTranscript();\n                                    }\n                                    _context.prev = 13;\n                                    _context.next = 16;\n                                    return this.start();\n                                case 16:\n                                    this.emitListeningChange(true);\n                                    _context.next = 22;\n                                    break;\n                                case 19:\n                                    _context.prev = 19;\n                                    _context.t0 = _context[\"catch\"](13);\n                                    // DOMExceptions indicate a redundant microphone start - safe to swallow\n                                    if (!(_context.t0 instanceof DOMException)) {\n                                        this.emitMicrophoneAvailabilityChange(false);\n                                    }\n                                case 22:\n                                case \"end\":\n                                    return _context.stop();\n                            }\n                        }\n                    }, _callee, this, [\n                        [\n                            13,\n                            19\n                        ]\n                    ]);\n                }));\n                function startListening() {\n                    return _startListening.apply(this, arguments);\n                }\n                return startListening;\n            }()\n        },\n        {\n            key: \"abortListening\",\n            value: function() {\n                var _abortListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n                    var _this6 = this;\n                    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while(1){\n                            switch(_context2.prev = _context2.next){\n                                case 0:\n                                    this.disconnect(\"ABORT\");\n                                    this.emitListeningChange(false);\n                                    _context2.next = 4;\n                                    return new Promise(function(resolve) {\n                                        _this6.onStopListening = resolve;\n                                    });\n                                case 4:\n                                case \"end\":\n                                    return _context2.stop();\n                            }\n                        }\n                    }, _callee2, this);\n                }));\n                function abortListening() {\n                    return _abortListening.apply(this, arguments);\n                }\n                return abortListening;\n            }()\n        },\n        {\n            key: \"stopListening\",\n            value: function() {\n                var _stopListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {\n                    var _this7 = this;\n                    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while(1){\n                            switch(_context3.prev = _context3.next){\n                                case 0:\n                                    this.disconnect(\"STOP\");\n                                    this.emitListeningChange(false);\n                                    _context3.next = 4;\n                                    return new Promise(function(resolve) {\n                                        _this7.onStopListening = resolve;\n                                    });\n                                case 4:\n                                case \"end\":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n                function stopListening() {\n                    return _stopListening.apply(this, arguments);\n                }\n                return stopListening;\n            }()\n        },\n        {\n            key: \"getRecognition\",\n            value: function getRecognition() {\n                return this.recognition;\n            }\n        },\n        {\n            key: \"start\",\n            value: function() {\n                var _start = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee4() {\n                    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                        while(1){\n                            switch(_context4.prev = _context4.next){\n                                case 0:\n                                    if (!(this.recognition && !this.listening)) {\n                                        _context4.next = 4;\n                                        break;\n                                    }\n                                    _context4.next = 3;\n                                    return this.recognition.start();\n                                case 3:\n                                    this.listening = true;\n                                case 4:\n                                case \"end\":\n                                    return _context4.stop();\n                            }\n                        }\n                    }, _callee4, this);\n                }));\n                function start() {\n                    return _start.apply(this, arguments);\n                }\n                return start;\n            }()\n        },\n        {\n            key: \"stop\",\n            value: function stop() {\n                if (this.recognition && this.listening) {\n                    this.recognition.stop();\n                    this.listening = false;\n                }\n            }\n        },\n        {\n            key: \"abort\",\n            value: function abort() {\n                if (this.recognition && this.listening) {\n                    this.recognition.abort();\n                    this.listening = false;\n                }\n            }\n        }\n    ]);\n    return RecognitionManager;\n}();\nexports[\"default\"] = RecognitionManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/RecognitionManager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/SpeechRecognition.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.useSpeechRecognition = void 0;\nvar _react = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar _actions = __webpack_require__(/*! ./actions */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/actions.js\");\nvar _reducers = __webpack_require__(/*! ./reducers */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/reducers.js\");\nvar _RecognitionManager = _interopRequireDefault(__webpack_require__(/*! ./RecognitionManager */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/RecognitionManager.js\"));\nvar _isAndroid = _interopRequireDefault(__webpack_require__(/*! ./isAndroid */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/isAndroid.js\"));\nvar _NativeSpeechRecognition = _interopRequireDefault(__webpack_require__(/*! ./NativeSpeechRecognition */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/NativeSpeechRecognition.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        \"default\": obj\n    };\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++){\n        arr2[i] = arr[i];\n    }\n    return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n    if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n    try {\n        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nvar _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\nvar _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\nvar recognitionManager;\nvar useSpeechRecognition = function useSpeechRecognition() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {}, _ref$transcribing = _ref.transcribing, transcribing = _ref$transcribing === void 0 ? true : _ref$transcribing, _ref$clearTranscriptO = _ref.clearTranscriptOnListen, clearTranscriptOnListen = _ref$clearTranscriptO === void 0 ? true : _ref$clearTranscriptO, _ref$commands = _ref.commands, commands = _ref$commands === void 0 ? [] : _ref$commands;\n    var _useState = (0, _react.useState)(SpeechRecognition.getRecognitionManager()), _useState2 = _slicedToArray(_useState, 1), recognitionManager = _useState2[0];\n    var _useState3 = (0, _react.useState)(_browserSupportsSpeechRecognition), _useState4 = _slicedToArray(_useState3, 2), browserSupportsSpeechRecognition = _useState4[0], setBrowserSupportsSpeechRecognition = _useState4[1];\n    var _useState5 = (0, _react.useState)(_browserSupportsContinuousListening), _useState6 = _slicedToArray(_useState5, 2), browserSupportsContinuousListening = _useState6[0], setBrowserSupportsContinuousListening = _useState6[1];\n    var _useReducer = (0, _react.useReducer)(_reducers.transcriptReducer, {\n        interimTranscript: recognitionManager.interimTranscript,\n        finalTranscript: \"\"\n    }), _useReducer2 = _slicedToArray(_useReducer, 2), _useReducer2$ = _useReducer2[0], interimTranscript = _useReducer2$.interimTranscript, finalTranscript = _useReducer2$.finalTranscript, dispatch = _useReducer2[1];\n    var _useState7 = (0, _react.useState)(recognitionManager.listening), _useState8 = _slicedToArray(_useState7, 2), listening = _useState8[0], setListening = _useState8[1];\n    var _useState9 = (0, _react.useState)(recognitionManager.isMicrophoneAvailable), _useState10 = _slicedToArray(_useState9, 2), isMicrophoneAvailable = _useState10[0], setMicrophoneAvailable = _useState10[1];\n    var commandsRef = (0, _react.useRef)(commands);\n    commandsRef.current = commands;\n    var dispatchClearTranscript = function dispatchClearTranscript() {\n        dispatch((0, _actions.clearTranscript)());\n    };\n    var resetTranscript = (0, _react.useCallback)(function() {\n        recognitionManager.resetTranscript();\n        dispatchClearTranscript();\n    }, [\n        recognitionManager\n    ]);\n    var testFuzzyMatch = function testFuzzyMatch(command, input, fuzzyMatchingThreshold) {\n        var commandToString = _typeof(command) === \"object\" ? command.toString() : command;\n        var commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, \"\").replace(/  +/g, \" \").trim();\n        var howSimilar = (0, _utils.compareTwoStringsUsingDiceCoefficient)(commandWithoutSpecials, input);\n        if (howSimilar >= fuzzyMatchingThreshold) {\n            return {\n                command: command,\n                commandWithoutSpecials: commandWithoutSpecials,\n                howSimilar: howSimilar,\n                isFuzzyMatch: true\n            };\n        }\n        return null;\n    };\n    var testMatch = function testMatch(command, input) {\n        var pattern = (0, _utils.commandToRegExp)(command);\n        var result = pattern.exec(input);\n        if (result) {\n            return {\n                command: command,\n                parameters: result.slice(1)\n            };\n        }\n        return null;\n    };\n    var matchCommands = (0, _react.useCallback)(function(newInterimTranscript, newFinalTranscript) {\n        commandsRef.current.forEach(function(_ref2) {\n            var command = _ref2.command, callback = _ref2.callback, _ref2$matchInterim = _ref2.matchInterim, matchInterim = _ref2$matchInterim === void 0 ? false : _ref2$matchInterim, _ref2$isFuzzyMatch = _ref2.isFuzzyMatch, isFuzzyMatch = _ref2$isFuzzyMatch === void 0 ? false : _ref2$isFuzzyMatch, _ref2$fuzzyMatchingTh = _ref2.fuzzyMatchingThreshold, fuzzyMatchingThreshold = _ref2$fuzzyMatchingTh === void 0 ? 0.8 : _ref2$fuzzyMatchingTh, _ref2$bestMatchOnly = _ref2.bestMatchOnly, bestMatchOnly = _ref2$bestMatchOnly === void 0 ? false : _ref2$bestMatchOnly;\n            var input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n            var subcommands = Array.isArray(command) ? command : [\n                command\n            ];\n            var results = subcommands.map(function(subcommand) {\n                if (isFuzzyMatch) {\n                    return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n                }\n                return testMatch(subcommand, input);\n            }).filter(function(x) {\n                return x;\n            });\n            if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n                results.sort(function(a, b) {\n                    return b.howSimilar - a.howSimilar;\n                });\n                var _results$ = results[0], _command = _results$.command, commandWithoutSpecials = _results$.commandWithoutSpecials, howSimilar = _results$.howSimilar;\n                callback(commandWithoutSpecials, input, howSimilar, {\n                    command: _command,\n                    resetTranscript: resetTranscript\n                });\n            } else {\n                results.forEach(function(result) {\n                    if (result.isFuzzyMatch) {\n                        var _command2 = result.command, _commandWithoutSpecials = result.commandWithoutSpecials, _howSimilar = result.howSimilar;\n                        callback(_commandWithoutSpecials, input, _howSimilar, {\n                            command: _command2,\n                            resetTranscript: resetTranscript\n                        });\n                    } else {\n                        var _command3 = result.command, parameters = result.parameters;\n                        callback.apply(void 0, _toConsumableArray(parameters).concat([\n                            {\n                                command: _command3,\n                                resetTranscript: resetTranscript\n                            }\n                        ]));\n                    }\n                });\n            }\n        });\n    }, [\n        resetTranscript\n    ]);\n    var handleTranscriptChange = (0, _react.useCallback)(function(newInterimTranscript, newFinalTranscript) {\n        if (transcribing) {\n            dispatch((0, _actions.appendTranscript)(newInterimTranscript, newFinalTranscript));\n        }\n        matchCommands(newInterimTranscript, newFinalTranscript);\n    }, [\n        matchCommands,\n        transcribing\n    ]);\n    var handleClearTranscript = (0, _react.useCallback)(function() {\n        if (clearTranscriptOnListen) {\n            dispatchClearTranscript();\n        }\n    }, [\n        clearTranscriptOnListen\n    ]);\n    (0, _react.useEffect)(function() {\n        var id = SpeechRecognition.counter;\n        SpeechRecognition.counter += 1;\n        var callbacks = {\n            onListeningChange: setListening,\n            onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n            onTranscriptChange: handleTranscriptChange,\n            onClearTranscript: handleClearTranscript,\n            onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n            onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n        };\n        recognitionManager.subscribe(id, callbacks);\n        return function() {\n            recognitionManager.unsubscribe(id);\n        };\n    }, [\n        transcribing,\n        clearTranscriptOnListen,\n        recognitionManager,\n        handleTranscriptChange,\n        handleClearTranscript\n    ]);\n    var transcript = (0, _utils.concatTranscripts)(finalTranscript, interimTranscript);\n    return {\n        transcript: transcript,\n        interimTranscript: interimTranscript,\n        finalTranscript: finalTranscript,\n        listening: listening,\n        isMicrophoneAvailable: isMicrophoneAvailable,\n        resetTranscript: resetTranscript,\n        browserSupportsSpeechRecognition: browserSupportsSpeechRecognition,\n        browserSupportsContinuousListening: browserSupportsContinuousListening\n    };\n};\nexports.useSpeechRecognition = useSpeechRecognition;\nvar SpeechRecognition = {\n    counter: 0,\n    applyPolyfill: function applyPolyfill(PolyfillSpeechRecognition) {\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n        } else {\n            recognitionManager = new _RecognitionManager[\"default\"](PolyfillSpeechRecognition);\n        }\n        var browserSupportsPolyfill = !!PolyfillSpeechRecognition && (0, _utils.browserSupportsPolyfills)();\n        _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n        _browserSupportsContinuousListening = browserSupportsPolyfill;\n    },\n    removePolyfill: function removePolyfill() {\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(_NativeSpeechRecognition[\"default\"]);\n        } else {\n            recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n        }\n        _browserSupportsSpeechRecognition = !!_NativeSpeechRecognition[\"default\"];\n        _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !(0, _isAndroid[\"default\"])();\n    },\n    getRecognitionManager: function getRecognitionManager() {\n        if (!recognitionManager) {\n            recognitionManager = new _RecognitionManager[\"default\"](_NativeSpeechRecognition[\"default\"]);\n        }\n        return recognitionManager;\n    },\n    getRecognition: function getRecognition() {\n        var recognitionManager = SpeechRecognition.getRecognitionManager();\n        return recognitionManager.getRecognition();\n    },\n    startListening: function() {\n        var _startListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee() {\n            var _ref3, continuous, language, recognitionManager, _args = arguments;\n            return regeneratorRuntime.wrap(function _callee$(_context) {\n                while(1){\n                    switch(_context.prev = _context.next){\n                        case 0:\n                            _ref3 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, continuous = _ref3.continuous, language = _ref3.language;\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context.next = 4;\n                            return recognitionManager.startListening({\n                                continuous: continuous,\n                                language: language\n                            });\n                        case 4:\n                        case \"end\":\n                            return _context.stop();\n                    }\n                }\n            }, _callee);\n        }));\n        function startListening() {\n            return _startListening.apply(this, arguments);\n        }\n        return startListening;\n    }(),\n    stopListening: function() {\n        var _stopListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2() {\n            var recognitionManager;\n            return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while(1){\n                    switch(_context2.prev = _context2.next){\n                        case 0:\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context2.next = 3;\n                            return recognitionManager.stopListening();\n                        case 3:\n                        case \"end\":\n                            return _context2.stop();\n                    }\n                }\n            }, _callee2);\n        }));\n        function stopListening() {\n            return _stopListening.apply(this, arguments);\n        }\n        return stopListening;\n    }(),\n    abortListening: function() {\n        var _abortListening = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {\n            var recognitionManager;\n            return regeneratorRuntime.wrap(function _callee3$(_context3) {\n                while(1){\n                    switch(_context3.prev = _context3.next){\n                        case 0:\n                            recognitionManager = SpeechRecognition.getRecognitionManager();\n                            _context3.next = 3;\n                            return recognitionManager.abortListening();\n                        case 3:\n                        case \"end\":\n                            return _context3.stop();\n                    }\n                }\n            }, _callee3);\n        }));\n        function abortListening() {\n            return _abortListening.apply(this, arguments);\n        }\n        return abortListening;\n    }(),\n    browserSupportsSpeechRecognition: function browserSupportsSpeechRecognition() {\n        return _browserSupportsSpeechRecognition;\n    },\n    browserSupportsContinuousListening: function browserSupportsContinuousListening() {\n        return _browserSupportsContinuousListening;\n    }\n};\nvar _default = SpeechRecognition;\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/actions.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/actions.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.appendTranscript = exports.clearTranscript = void 0;\nvar _constants = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/constants.js\");\nvar clearTranscript = function clearTranscript() {\n    return {\n        type: _constants.CLEAR_TRANSCRIPT\n    };\n};\nexports.clearTranscript = clearTranscript;\nvar appendTranscript = function appendTranscript(interimTranscript, finalTranscript) {\n    return {\n        type: _constants.APPEND_TRANSCRIPT,\n        payload: {\n            interimTranscript: interimTranscript,\n            finalTranscript: finalTranscript\n        }\n    };\n};\nexports.appendTranscript = appendTranscript;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2FjdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHdCQUF3QixHQUFHQSx1QkFBdUIsR0FBRyxLQUFLO0FBRTFELElBQUlJLGFBQWFDLG1CQUFPQSxDQUFDLGlHQUFhO0FBRXRDLElBQUlGLGtCQUFrQixTQUFTQTtJQUM3QixPQUFPO1FBQ0xHLE1BQU1GLFdBQVdHLGdCQUFnQjtJQUNuQztBQUNGO0FBRUFQLHVCQUF1QixHQUFHRztBQUUxQixJQUFJRCxtQkFBbUIsU0FBU0EsaUJBQWlCTSxpQkFBaUIsRUFBRUMsZUFBZTtJQUNqRixPQUFPO1FBQ0xILE1BQU1GLFdBQVdNLGlCQUFpQjtRQUNsQ0MsU0FBUztZQUNQSCxtQkFBbUJBO1lBQ25CQyxpQkFBaUJBO1FBQ25CO0lBQ0Y7QUFDRjtBQUVBVCx3QkFBd0IsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvYWN0aW9ucy5qcz9hYzcyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hcHBlbmRUcmFuc2NyaXB0ID0gZXhwb3J0cy5jbGVhclRyYW5zY3JpcHQgPSB2b2lkIDA7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4vY29uc3RhbnRzXCIpO1xuXG52YXIgY2xlYXJUcmFuc2NyaXB0ID0gZnVuY3Rpb24gY2xlYXJUcmFuc2NyaXB0KCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IF9jb25zdGFudHMuQ0xFQVJfVFJBTlNDUklQVFxuICB9O1xufTtcblxuZXhwb3J0cy5jbGVhclRyYW5zY3JpcHQgPSBjbGVhclRyYW5zY3JpcHQ7XG5cbnZhciBhcHBlbmRUcmFuc2NyaXB0ID0gZnVuY3Rpb24gYXBwZW5kVHJhbnNjcmlwdChpbnRlcmltVHJhbnNjcmlwdCwgZmluYWxUcmFuc2NyaXB0KSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogX2NvbnN0YW50cy5BUFBFTkRfVFJBTlNDUklQVCxcbiAgICBwYXlsb2FkOiB7XG4gICAgICBpbnRlcmltVHJhbnNjcmlwdDogaW50ZXJpbVRyYW5zY3JpcHQsXG4gICAgICBmaW5hbFRyYW5zY3JpcHQ6IGZpbmFsVHJhbnNjcmlwdFxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydHMuYXBwZW5kVHJhbnNjcmlwdCA9IGFwcGVuZFRyYW5zY3JpcHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXBwZW5kVHJhbnNjcmlwdCIsImNsZWFyVHJhbnNjcmlwdCIsIl9jb25zdGFudHMiLCJyZXF1aXJlIiwidHlwZSIsIkNMRUFSX1RSQU5TQ1JJUFQiLCJpbnRlcmltVHJhbnNjcmlwdCIsImZpbmFsVHJhbnNjcmlwdCIsIkFQUEVORF9UUkFOU0NSSVBUIiwicGF5bG9hZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/actions.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/constants.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/constants.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.APPEND_TRANSCRIPT = exports.CLEAR_TRANSCRIPT = void 0;\nvar CLEAR_TRANSCRIPT = \"CLEAR_TRANSCRIPT\";\nexports.CLEAR_TRANSCRIPT = CLEAR_TRANSCRIPT;\nvar APPEND_TRANSCRIPT = \"APPEND_TRANSCRIPT\";\nexports.APPEND_TRANSCRIPT = APPEND_TRANSCRIPT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFDNUQsSUFBSUcsbUJBQW1CO0FBQ3ZCSCx3QkFBd0IsR0FBR0c7QUFDM0IsSUFBSUQsb0JBQW9CO0FBQ3hCRix5QkFBeUIsR0FBR0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwZWVjaC1yZWNvZ25pdGlvbi9saWIvY29uc3RhbnRzLmpzPzlmODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkFQUEVORF9UUkFOU0NSSVBUID0gZXhwb3J0cy5DTEVBUl9UUkFOU0NSSVBUID0gdm9pZCAwO1xudmFyIENMRUFSX1RSQU5TQ1JJUFQgPSAnQ0xFQVJfVFJBTlNDUklQVCc7XG5leHBvcnRzLkNMRUFSX1RSQU5TQ1JJUFQgPSBDTEVBUl9UUkFOU0NSSVBUO1xudmFyIEFQUEVORF9UUkFOU0NSSVBUID0gJ0FQUEVORF9UUkFOU0NSSVBUJztcbmV4cG9ydHMuQVBQRU5EX1RSQU5TQ1JJUFQgPSBBUFBFTkRfVFJBTlNDUklQVDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJBUFBFTkRfVFJBTlNDUklQVCIsIkNMRUFSX1RSQU5TQ1JJUFQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/constants.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nfunction _typeof(obj) {\n    \"@babel/helpers - typeof\";\n    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n        _typeof = function _typeof(obj) {\n            return typeof obj;\n        };\n    } else {\n        _typeof = function _typeof(obj) {\n            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n        };\n    }\n    return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useSpeechRecognition\", ({\n    enumerable: true,\n    get: function get() {\n        return _SpeechRecognition.useSpeechRecognition;\n    }\n}));\nexports[\"default\"] = void 0;\nvar _SpeechRecognition = _interopRequireWildcard(__webpack_require__(/*! ./SpeechRecognition */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/SpeechRecognition.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function _getRequireWildcardCache() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n        return {\n            \"default\": obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj[\"default\"] = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nvar _default = _SpeechRecognition[\"default\"];\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWIsU0FBU0EsUUFBUUMsR0FBRztJQUFJO0lBQTJCLElBQUksT0FBT0MsV0FBVyxjQUFjLE9BQU9BLE9BQU9DLFFBQVEsS0FBSyxVQUFVO1FBQUVILFVBQVUsU0FBU0EsUUFBUUMsR0FBRztZQUFJLE9BQU8sT0FBT0E7UUFBSztJQUFHLE9BQU87UUFBRUQsVUFBVSxTQUFTQSxRQUFRQyxHQUFHO1lBQUksT0FBT0EsT0FBTyxPQUFPQyxXQUFXLGNBQWNELElBQUlHLFdBQVcsS0FBS0YsVUFBVUQsUUFBUUMsT0FBT0csU0FBUyxHQUFHLFdBQVcsT0FBT0o7UUFBSztJQUFHO0lBQUUsT0FBT0QsUUFBUUM7QUFBTTtBQUV6WEssOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZILHdEQUF1RDtJQUNyREksWUFBWTtJQUNaQyxLQUFLLFNBQVNBO1FBQ1osT0FBT0MsbUJBQW1CQyxvQkFBb0I7SUFDaEQ7QUFDRixDQUFDLEVBQUM7QUFDRkwsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJSSxxQkFBcUJFLHdCQUF3QkMsbUJBQU9BLENBQUMsaUhBQXFCO0FBRTlFLFNBQVNDO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQixTQUFTQTtRQUE2QixPQUFPRTtJQUFPO0lBQUcsT0FBT0E7QUFBTztBQUVqTixTQUFTSix3QkFBd0JiLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJa0IsVUFBVSxFQUFFO1FBQUUsT0FBT2xCO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVFELFFBQVFDLFNBQVMsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUUsV0FBV0E7UUFBSTtJQUFHO0lBQUUsSUFBSWlCLFFBQVFGO0lBQTRCLElBQUlFLFNBQVNBLE1BQU1FLEdBQUcsQ0FBQ25CLE1BQU07UUFBRSxPQUFPaUIsTUFBTVAsR0FBRyxDQUFDVjtJQUFNO0lBQUUsSUFBSW9CLFNBQVMsQ0FBQztJQUFHLElBQUlDLHdCQUF3QmhCLE9BQU9DLGNBQWMsSUFBSUQsT0FBT2lCLHdCQUF3QjtJQUFFLElBQUssSUFBSUMsT0FBT3ZCLElBQUs7UUFBRSxJQUFJSyxPQUFPRCxTQUFTLENBQUNvQixjQUFjLENBQUNDLElBQUksQ0FBQ3pCLEtBQUt1QixNQUFNO1lBQUUsSUFBSUcsT0FBT0wsd0JBQXdCaEIsT0FBT2lCLHdCQUF3QixDQUFDdEIsS0FBS3VCLE9BQU87WUFBTSxJQUFJRyxRQUFTQSxDQUFBQSxLQUFLaEIsR0FBRyxJQUFJZ0IsS0FBS0MsR0FBRyxHQUFHO2dCQUFFdEIsT0FBT0MsY0FBYyxDQUFDYyxRQUFRRyxLQUFLRztZQUFPLE9BQU87Z0JBQUVOLE1BQU0sQ0FBQ0csSUFBSSxHQUFHdkIsR0FBRyxDQUFDdUIsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxNQUFNLENBQUMsVUFBVSxHQUFHcEI7SUFBSyxJQUFJaUIsT0FBTztRQUFFQSxNQUFNVSxHQUFHLENBQUMzQixLQUFLb0I7SUFBUztJQUFFLE9BQU9BO0FBQVE7QUFFN3VCLElBQUlRLFdBQVdqQixrQkFBa0IsQ0FBQyxVQUFVO0FBQzVDSixrQkFBa0IsR0FBR3FCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2luZGV4LmpzP2Y1ZTciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInVzZVNwZWVjaFJlY29nbml0aW9uXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TcGVlY2hSZWNvZ25pdGlvbi51c2VTcGVlY2hSZWNvZ25pdGlvbjtcbiAgfVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9TcGVlY2hSZWNvZ25pdGlvbiA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1NwZWVjaFJlY29nbml0aW9uXCIpKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IF90eXBlb2Yob2JqKSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09ialtcImRlZmF1bHRcIl0gPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxudmFyIF9kZWZhdWx0ID0gX1NwZWVjaFJlY29nbml0aW9uW1wiZGVmYXVsdFwiXTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX1NwZWVjaFJlY29nbml0aW9uIiwidXNlU3BlZWNoUmVjb2duaXRpb24iLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJfX2VzTW9kdWxlIiwiaGFzIiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/isAndroid.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/isAndroid.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = function _default() {\n    return /(android)/i.test(typeof navigator !== \"undefined\" ? navigator.userAgent : \"\");\n};\nexports[\"default\"] = _default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL2lzQW5kcm9pZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRSxXQUFXLFNBQVNBO0lBQ3RCLE9BQU8sYUFBYUMsSUFBSSxDQUFDLE9BQU9DLGNBQWMsY0FBY0EsVUFBVUMsU0FBUyxHQUFHO0FBQ3BGO0FBRUFMLGtCQUFrQixHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2xpYi9pc0FuZHJvaWQuanM/MmUyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2RlZmF1bHQgPSBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgcmV0dXJuIC8oYW5kcm9pZCkvaS50ZXN0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnID8gbmF2aWdhdG9yLnVzZXJBZ2VudCA6ICcnKTtcbn07XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2RlZmF1bHQiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/isAndroid.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/reducers.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/reducers.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.transcriptReducer = void 0;\nvar _constants = __webpack_require__(/*! ./constants */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/constants.js\");\nvar _utils = __webpack_require__(/*! ./utils */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/utils.js\");\nvar transcriptReducer = function transcriptReducer(state, action) {\n    switch(action.type){\n        case _constants.CLEAR_TRANSCRIPT:\n            return {\n                interimTranscript: \"\",\n                finalTranscript: \"\"\n            };\n        case _constants.APPEND_TRANSCRIPT:\n            return {\n                interimTranscript: action.payload.interimTranscript,\n                finalTranscript: (0, _utils.concatTranscripts)(state.finalTranscript, action.payload.finalTranscript)\n            };\n        default:\n            throw new Error();\n    }\n};\nexports.transcriptReducer = transcriptReducer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL3JlZHVjZXJzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx5QkFBeUIsR0FBRyxLQUFLO0FBRWpDLElBQUlHLGFBQWFDLG1CQUFPQSxDQUFDLGlHQUFhO0FBRXRDLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLHlGQUFTO0FBRTlCLElBQUlGLG9CQUFvQixTQUFTQSxrQkFBa0JJLEtBQUssRUFBRUMsTUFBTTtJQUM5RCxPQUFRQSxPQUFPQyxJQUFJO1FBQ2pCLEtBQUtMLFdBQVdNLGdCQUFnQjtZQUM5QixPQUFPO2dCQUNMQyxtQkFBbUI7Z0JBQ25CQyxpQkFBaUI7WUFDbkI7UUFFRixLQUFLUixXQUFXUyxpQkFBaUI7WUFDL0IsT0FBTztnQkFDTEYsbUJBQW1CSCxPQUFPTSxPQUFPLENBQUNILGlCQUFpQjtnQkFDbkRDLGlCQUFpQixDQUFDLEdBQUdOLE9BQU9TLGlCQUFpQixFQUFFUixNQUFNSyxlQUFlLEVBQUVKLE9BQU9NLE9BQU8sQ0FBQ0YsZUFBZTtZQUN0RztRQUVGO1lBQ0UsTUFBTSxJQUFJSTtJQUNkO0FBQ0Y7QUFFQWYseUJBQXlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vbGliL3JlZHVjZXJzLmpzPzJlNzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRyYW5zY3JpcHRSZWR1Y2VyID0gdm9pZCAwO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL2NvbnN0YW50c1wiKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG52YXIgdHJhbnNjcmlwdFJlZHVjZXIgPSBmdW5jdGlvbiB0cmFuc2NyaXB0UmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIF9jb25zdGFudHMuQ0xFQVJfVFJBTlNDUklQVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGludGVyaW1UcmFuc2NyaXB0OiAnJyxcbiAgICAgICAgZmluYWxUcmFuc2NyaXB0OiAnJ1xuICAgICAgfTtcblxuICAgIGNhc2UgX2NvbnN0YW50cy5BUFBFTkRfVFJBTlNDUklQVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGludGVyaW1UcmFuc2NyaXB0OiBhY3Rpb24ucGF5bG9hZC5pbnRlcmltVHJhbnNjcmlwdCxcbiAgICAgICAgZmluYWxUcmFuc2NyaXB0OiAoMCwgX3V0aWxzLmNvbmNhdFRyYW5zY3JpcHRzKShzdGF0ZS5maW5hbFRyYW5zY3JpcHQsIGFjdGlvbi5wYXlsb2FkLmZpbmFsVHJhbnNjcmlwdClcbiAgICAgIH07XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gIH1cbn07XG5cbmV4cG9ydHMudHJhbnNjcmlwdFJlZHVjZXIgPSB0cmFuc2NyaXB0UmVkdWNlcjsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFuc2NyaXB0UmVkdWNlciIsIl9jb25zdGFudHMiLCJyZXF1aXJlIiwiX3V0aWxzIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiQ0xFQVJfVFJBTlNDUklQVCIsImludGVyaW1UcmFuc2NyaXB0IiwiZmluYWxUcmFuc2NyaXB0IiwiQVBQRU5EX1RSQU5TQ1JJUFQiLCJwYXlsb2FkIiwiY29uY2F0VHJhbnNjcmlwdHMiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/reducers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-speech-recognition/lib/utils.js":
/*!************************************************************!*\
  !*** ./node_modules/react-speech-recognition/lib/utils.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.browserSupportsPolyfills = exports.compareTwoStringsUsingDiceCoefficient = exports.commandToRegExp = exports.concatTranscripts = exports.debounce = void 0;\nvar debounce = function debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this;\n        var args = arguments;\n        var later = function later() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\nexports.debounce = debounce;\nvar concatTranscripts = function concatTranscripts() {\n    for(var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++){\n        transcriptParts[_key] = arguments[_key];\n    }\n    return transcriptParts.map(function(t) {\n        return t.trim();\n    }).join(\" \").trim();\n}; // The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\nexports.concatTranscripts = concatTranscripts;\nvar optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nvar optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nvar namedParam = /(\\(\\?)?:\\w+/g;\nvar splatParam = /\\*/g;\nvar escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\nvar commandToRegExp = function commandToRegExp(command) {\n    if (command instanceof RegExp) {\n        return new RegExp(command.source, \"i\");\n    }\n    command = command.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, function(match, optional) {\n        return optional ? match : \"([^\\\\s]+)\";\n    }).replace(splatParam, \"(.*?)\").replace(optionalRegex, \"\\\\s*$1?\\\\s*\");\n    return new RegExp(\"^\" + command + \"$\", \"i\");\n}; // this is from https://github.com/aceakash/string-similarity\nexports.commandToRegExp = commandToRegExp;\nvar compareTwoStringsUsingDiceCoefficient = function compareTwoStringsUsingDiceCoefficient(first, second) {\n    first = first.replace(/\\s+/g, \"\").toLowerCase();\n    second = second.replace(/\\s+/g, \"\").toLowerCase();\n    if (!first.length && !second.length) return 1; // if both are empty strings\n    if (!first.length || !second.length) return 0; // if only one is empty string\n    if (first === second) return 1; // identical\n    if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n    var firstBigrams = new Map();\n    for(var i = 0; i < first.length - 1; i++){\n        var bigram = first.substring(i, i + 2);\n        var count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    var intersectionSize = 0;\n    for(var _i = 0; _i < second.length - 1; _i++){\n        var _bigram = second.substring(_i, _i + 2);\n        var _count = firstBigrams.has(_bigram) ? firstBigrams.get(_bigram) : 0;\n        if (_count > 0) {\n            firstBigrams.set(_bigram, _count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nexports.compareTwoStringsUsingDiceCoefficient = compareTwoStringsUsingDiceCoefficient;\nvar browserSupportsPolyfills = function browserSupportsPolyfills() {\n    return  true && window.navigator !== undefined && window.navigator.mediaDevices !== undefined && window.navigator.mediaDevices.getUserMedia !== undefined && (window.AudioContext !== undefined || window.webkitAudioContext !== undefined);\n};\nexports.browserSupportsPolyfills = browserSupportsPolyfills;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-speech-recognition/lib/utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-use-clipboard/dist/react-use-clipboard.module.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-use-clipboard/dist/react-use-clipboard.module.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! copy-to-clipboard */ \"(app-pages-browser)/./node_modules/copy-to-clipboard/index.js\");\n/* harmony import */ var copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(n, i) {\n    var u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), c = u[0], e = u[1], f = i && i.successDuration;\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (c && f) {\n            var t = setTimeout(function() {\n                e(!1);\n            }, f);\n            return function() {\n                clearTimeout(t);\n            };\n        }\n    }, [\n        c,\n        f\n    ]), [\n        c,\n        function() {\n            var t = copy_to_clipboard__WEBPACK_IMPORTED_MODULE_1___default()(n);\n            e(t);\n        }\n    ];\n} //# sourceMappingURL=react-use-clipboard.module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC11c2UtY2xpcGJvYXJkL2Rpc3QvcmVhY3QtdXNlLWNsaXBib2FyZC5tb2R1bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBZ0Q7QUFBaUM7QUFBQSw2QkFBZSxvQ0FBU0ssQ0FBQyxFQUFDQyxDQUFDO0lBQUUsSUFBSUMsSUFBRU4sK0NBQUNBLENBQUMsQ0FBQyxJQUFHTyxJQUFFRCxDQUFDLENBQUMsRUFBRSxFQUFDRSxJQUFFRixDQUFDLENBQUMsRUFBRSxFQUFDRyxJQUFFSixLQUFHQSxFQUFFSyxlQUFlO0lBQUMsT0FBT1IsZ0RBQUNBLENBQUM7UUFBVyxJQUFHSyxLQUFHRSxHQUFFO1lBQUMsSUFBSVQsSUFBRVcsV0FBVztnQkFBV0gsRUFBRSxDQUFDO1lBQUUsR0FBRUM7WUFBRyxPQUFPO2dCQUFXRyxhQUFhWjtZQUFFO1FBQUM7SUFBQyxHQUFFO1FBQUNPO1FBQUVFO0tBQUUsR0FBRTtRQUFDRjtRQUFFO1lBQVcsSUFBSVAsSUFBRUcsd0RBQUNBLENBQUNDO1lBQUdJLEVBQUVSO1FBQUU7S0FBRTtBQUFBLEVBQzdTLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvcmVhY3QtdXNlLWNsaXBib2FyZC9kaXN0L3JlYWN0LXVzZS1jbGlwYm9hcmQubW9kdWxlLmpzPzlmOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0e3VzZVN0YXRlIGFzIHQsdXNlRWZmZWN0IGFzIG99ZnJvbVwicmVhY3RcIjtpbXBvcnQgciBmcm9tXCJjb3B5LXRvLWNsaXBib2FyZFwiO2V4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG4saSl7dmFyIHU9dCghMSksYz11WzBdLGU9dVsxXSxmPWkmJmkuc3VjY2Vzc0R1cmF0aW9uO3JldHVybiBvKGZ1bmN0aW9uKCl7aWYoYyYmZil7dmFyIHQ9c2V0VGltZW91dChmdW5jdGlvbigpe2UoITEpfSxmKTtyZXR1cm4gZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodCl9fX0sW2MsZl0pLFtjLGZ1bmN0aW9uKCl7dmFyIHQ9cihuKTtlKHQpfV19XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC11c2UtY2xpcGJvYXJkLm1vZHVsZS5qcy5tYXBcbiJdLCJuYW1lcyI6WyJ1c2VTdGF0ZSIsInQiLCJ1c2VFZmZlY3QiLCJvIiwiciIsIm4iLCJpIiwidSIsImMiLCJlIiwiZiIsInN1Y2Nlc3NEdXJhdGlvbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-use-clipboard/dist/react-use-clipboard.module.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var runtime = function(exports) {\n    \"use strict\";\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var defineProperty = Object.defineProperty || function(obj, key, desc) {\n        obj[key] = desc.value;\n    };\n    var undefined; // More compressible than void 0.\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n    function define(obj, key, value) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n        return obj[key];\n    }\n    try {\n        // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n        define({}, \"\");\n    } catch (err) {\n        define = function(obj, key, value) {\n            return obj[key] = value;\n        };\n    }\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n        var generator = Object.create(protoGenerator.prototype);\n        var context = new Context(tryLocsList || []);\n        // The ._invoke method unifies the implementations of the .next,\n        // .throw, and .return methods.\n        defineProperty(generator, \"_invoke\", {\n            value: makeInvokeMethod(innerFn, self, context)\n        });\n        return generator;\n    }\n    exports.wrap = wrap;\n    // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n    function tryCatch(fn, obj, arg) {\n        try {\n            return {\n                type: \"normal\",\n                arg: fn.call(obj, arg)\n            };\n        } catch (err) {\n            return {\n                type: \"throw\",\n                arg: err\n            };\n        }\n    }\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\";\n    // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n    var ContinueSentinel = {};\n    // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n    var IteratorPrototype = {};\n    define(IteratorPrototype, iteratorSymbol, function() {\n        return this;\n    });\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n        // This environment has a native %IteratorPrototype%; use it instead\n        // of the polyfill.\n        IteratorPrototype = NativeIteratorPrototype;\n    }\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = GeneratorFunctionPrototype;\n    defineProperty(Gp, \"constructor\", {\n        value: GeneratorFunctionPrototype,\n        configurable: true\n    });\n    defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n        value: GeneratorFunction,\n        configurable: true\n    });\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\");\n    // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n    function defineIteratorMethods(prototype) {\n        [\n            \"next\",\n            \"throw\",\n            \"return\"\n        ].forEach(function(method) {\n            define(prototype, method, function(arg) {\n                return this._invoke(method, arg);\n            });\n        });\n    }\n    exports.isGeneratorFunction = function(genFun) {\n        var ctor = typeof genFun === \"function\" && genFun.constructor;\n        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n    exports.mark = function(genFun) {\n        if (Object.setPrototypeOf) {\n            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n        } else {\n            genFun.__proto__ = GeneratorFunctionPrototype;\n            define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n        }\n        genFun.prototype = Object.create(Gp);\n        return genFun;\n    };\n    // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n    exports.awrap = function(arg) {\n        return {\n            __await: arg\n        };\n    };\n    function AsyncIterator(generator, PromiseImpl) {\n        function invoke(method, arg, resolve, reject) {\n            var record = tryCatch(generator[method], generator, arg);\n            if (record.type === \"throw\") {\n                reject(record.arg);\n            } else {\n                var result = record.arg;\n                var value = result.value;\n                if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n                    return PromiseImpl.resolve(value.__await).then(function(value) {\n                        invoke(\"next\", value, resolve, reject);\n                    }, function(err) {\n                        invoke(\"throw\", err, resolve, reject);\n                    });\n                }\n                return PromiseImpl.resolve(value).then(function(unwrapped) {\n                    // When a yielded Promise is resolved, its final value becomes\n                    // the .value of the Promise<{value,done}> result for the\n                    // current iteration.\n                    result.value = unwrapped;\n                    resolve(result);\n                }, function(error) {\n                    // If a rejected Promise was yielded, throw the rejection back\n                    // into the async generator function so it can be handled there.\n                    return invoke(\"throw\", error, resolve, reject);\n                });\n            }\n        }\n        var previousPromise;\n        function enqueue(method, arg) {\n            function callInvokeWithMethodAndArg() {\n                return new PromiseImpl(function(resolve, reject) {\n                    invoke(method, arg, resolve, reject);\n                });\n            }\n            return previousPromise = // If enqueue has been called before, then we want to wait until\n            // all previous Promises have been resolved before calling invoke,\n            // so that results are always delivered in the correct order. If\n            // enqueue has not been called before, then it is important to\n            // call invoke immediately, without waiting on a callback to fire,\n            // so that the async generator function has the opportunity to do\n            // any necessary setup in a predictable way. This predictability\n            // is why the Promise constructor synchronously invokes its\n            // executor callback, and why async functions synchronously\n            // execute code before the first await. Since we implement simple\n            // async functions in terms of async generators, it is especially\n            // important to get this right, even though it requires care.\n            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n            // invocations of the iterator.\n            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        }\n        // Define the unified helper method that is used to implement .next,\n        // .throw, and .return (see defineIteratorMethods).\n        defineProperty(this, \"_invoke\", {\n            value: enqueue\n        });\n    }\n    defineIteratorMethods(AsyncIterator.prototype);\n    define(AsyncIterator.prototype, asyncIteratorSymbol, function() {\n        return this;\n    });\n    exports.AsyncIterator = AsyncIterator;\n    // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n    exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n        if (PromiseImpl === void 0) PromiseImpl = Promise;\n        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n        return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n         : iter.next().then(function(result) {\n            return result.done ? result.value : iter.next();\n        });\n    };\n    function makeInvokeMethod(innerFn, self, context) {\n        var state = GenStateSuspendedStart;\n        return function invoke(method, arg) {\n            if (state === GenStateExecuting) {\n                throw new Error(\"Generator is already running\");\n            }\n            if (state === GenStateCompleted) {\n                if (method === \"throw\") {\n                    throw arg;\n                }\n                // Be forgiving, per GeneratorResume behavior specified since ES2015:\n                // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume\n                // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume\n                return doneResult();\n            }\n            context.method = method;\n            context.arg = arg;\n            while(true){\n                var delegate = context.delegate;\n                if (delegate) {\n                    var delegateResult = maybeInvokeDelegate(delegate, context);\n                    if (delegateResult) {\n                        if (delegateResult === ContinueSentinel) continue;\n                        return delegateResult;\n                    }\n                }\n                if (context.method === \"next\") {\n                    // Setting context._sent for legacy support of Babel's\n                    // function.sent implementation.\n                    context.sent = context._sent = context.arg;\n                } else if (context.method === \"throw\") {\n                    if (state === GenStateSuspendedStart) {\n                        state = GenStateCompleted;\n                        throw context.arg;\n                    }\n                    context.dispatchException(context.arg);\n                } else if (context.method === \"return\") {\n                    context.abrupt(\"return\", context.arg);\n                }\n                state = GenStateExecuting;\n                var record = tryCatch(innerFn, self, context);\n                if (record.type === \"normal\") {\n                    // If an exception is thrown from innerFn, we leave state ===\n                    // GenStateExecuting and loop back for another invocation.\n                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n                    if (record.arg === ContinueSentinel) {\n                        continue;\n                    }\n                    return {\n                        value: record.arg,\n                        done: context.done\n                    };\n                } else if (record.type === \"throw\") {\n                    state = GenStateCompleted;\n                    // Dispatch the exception by looping back around to the\n                    // context.dispatchException(context.arg) call above.\n                    context.method = \"throw\";\n                    context.arg = record.arg;\n                }\n            }\n        };\n    }\n    // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n    function maybeInvokeDelegate(delegate, context) {\n        var methodName = context.method;\n        var method = delegate.iterator[methodName];\n        if (method === undefined) {\n            // A .throw or .return when the delegate iterator has no .throw\n            // method, or a missing .next method, always terminate the\n            // yield* loop.\n            context.delegate = null;\n            // Note: [\"return\"] must be used for ES3 parsing compatibility.\n            if (methodName === \"throw\" && delegate.iterator[\"return\"]) {\n                // If the delegate iterator has a return method, give it a\n                // chance to clean up.\n                context.method = \"return\";\n                context.arg = undefined;\n                maybeInvokeDelegate(delegate, context);\n                if (context.method === \"throw\") {\n                    // If maybeInvokeDelegate(context) changed context.method from\n                    // \"return\" to \"throw\", let that override the TypeError below.\n                    return ContinueSentinel;\n                }\n            }\n            if (methodName !== \"return\") {\n                context.method = \"throw\";\n                context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\");\n            }\n            return ContinueSentinel;\n        }\n        var record = tryCatch(method, delegate.iterator, context.arg);\n        if (record.type === \"throw\") {\n            context.method = \"throw\";\n            context.arg = record.arg;\n            context.delegate = null;\n            return ContinueSentinel;\n        }\n        var info = record.arg;\n        if (!info) {\n            context.method = \"throw\";\n            context.arg = new TypeError(\"iterator result is not an object\");\n            context.delegate = null;\n            return ContinueSentinel;\n        }\n        if (info.done) {\n            // Assign the result of the finished delegate to the temporary\n            // variable specified by delegate.resultName (see delegateYield).\n            context[delegate.resultName] = info.value;\n            // Resume execution at the desired location (see delegateYield).\n            context.next = delegate.nextLoc;\n            // If context.method was \"throw\" but the delegate handled the\n            // exception, let the outer generator proceed normally. If\n            // context.method was \"next\", forget context.arg since it has been\n            // \"consumed\" by the delegate iterator. If context.method was\n            // \"return\", allow the original .return call to continue in the\n            // outer generator.\n            if (context.method !== \"return\") {\n                context.method = \"next\";\n                context.arg = undefined;\n            }\n        } else {\n            // Re-yield the result returned by the delegate method.\n            return info;\n        }\n        // The delegate iterator is finished, so forget it and continue with\n        // the outer generator.\n        context.delegate = null;\n        return ContinueSentinel;\n    }\n    // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\");\n    // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n    define(Gp, iteratorSymbol, function() {\n        return this;\n    });\n    define(Gp, \"toString\", function() {\n        return \"[object Generator]\";\n    });\n    function pushTryEntry(locs) {\n        var entry = {\n            tryLoc: locs[0]\n        };\n        if (1 in locs) {\n            entry.catchLoc = locs[1];\n        }\n        if (2 in locs) {\n            entry.finallyLoc = locs[2];\n            entry.afterLoc = locs[3];\n        }\n        this.tryEntries.push(entry);\n    }\n    function resetTryEntry(entry) {\n        var record = entry.completion || {};\n        record.type = \"normal\";\n        delete record.arg;\n        entry.completion = record;\n    }\n    function Context(tryLocsList) {\n        // The root entry object (effectively a try statement without a catch\n        // or a finally block) gives us a place to store values thrown from\n        // locations where there is no enclosing try statement.\n        this.tryEntries = [\n            {\n                tryLoc: \"root\"\n            }\n        ];\n        tryLocsList.forEach(pushTryEntry, this);\n        this.reset(true);\n    }\n    exports.keys = function(val) {\n        var object = Object(val);\n        var keys = [];\n        for(var key in object){\n            keys.push(key);\n        }\n        keys.reverse();\n        // Rather than returning an object with a next method, we keep\n        // things simple and return the next function itself.\n        return function next() {\n            while(keys.length){\n                var key = keys.pop();\n                if (key in object) {\n                    next.value = key;\n                    next.done = false;\n                    return next;\n                }\n            }\n            // To avoid creating an additional object, we just hang the .value\n            // and .done properties off the next function object itself. This\n            // also ensures that the minifier will not anonymize the function.\n            next.done = true;\n            return next;\n        };\n    };\n    function values(iterable) {\n        if (iterable != null) {\n            var iteratorMethod = iterable[iteratorSymbol];\n            if (iteratorMethod) {\n                return iteratorMethod.call(iterable);\n            }\n            if (typeof iterable.next === \"function\") {\n                return iterable;\n            }\n            if (!isNaN(iterable.length)) {\n                var i = -1, next = function next() {\n                    while(++i < iterable.length){\n                        if (hasOwn.call(iterable, i)) {\n                            next.value = iterable[i];\n                            next.done = false;\n                            return next;\n                        }\n                    }\n                    next.value = undefined;\n                    next.done = true;\n                    return next;\n                };\n                return next.next = next;\n            }\n        }\n        throw new TypeError(typeof iterable + \" is not iterable\");\n    }\n    exports.values = values;\n    function doneResult() {\n        return {\n            value: undefined,\n            done: true\n        };\n    }\n    Context.prototype = {\n        constructor: Context,\n        reset: function(skipTempReset) {\n            this.prev = 0;\n            this.next = 0;\n            // Resetting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            this.sent = this._sent = undefined;\n            this.done = false;\n            this.delegate = null;\n            this.method = \"next\";\n            this.arg = undefined;\n            this.tryEntries.forEach(resetTryEntry);\n            if (!skipTempReset) {\n                for(var name in this){\n                    // Not sure about the optimal order of these conditions:\n                    if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n                        this[name] = undefined;\n                    }\n                }\n            }\n        },\n        stop: function() {\n            this.done = true;\n            var rootEntry = this.tryEntries[0];\n            var rootRecord = rootEntry.completion;\n            if (rootRecord.type === \"throw\") {\n                throw rootRecord.arg;\n            }\n            return this.rval;\n        },\n        dispatchException: function(exception) {\n            if (this.done) {\n                throw exception;\n            }\n            var context = this;\n            function handle(loc, caught) {\n                record.type = \"throw\";\n                record.arg = exception;\n                context.next = loc;\n                if (caught) {\n                    // If the dispatched exception was caught by a catch block,\n                    // then let that catch block handle the exception normally.\n                    context.method = \"next\";\n                    context.arg = undefined;\n                }\n                return !!caught;\n            }\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                var record = entry.completion;\n                if (entry.tryLoc === \"root\") {\n                    // Exception thrown outside of any try block that could handle\n                    // it, so set the completion value of the entire function to\n                    // throw the exception.\n                    return handle(\"end\");\n                }\n                if (entry.tryLoc <= this.prev) {\n                    var hasCatch = hasOwn.call(entry, \"catchLoc\");\n                    var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n                    if (hasCatch && hasFinally) {\n                        if (this.prev < entry.catchLoc) {\n                            return handle(entry.catchLoc, true);\n                        } else if (this.prev < entry.finallyLoc) {\n                            return handle(entry.finallyLoc);\n                        }\n                    } else if (hasCatch) {\n                        if (this.prev < entry.catchLoc) {\n                            return handle(entry.catchLoc, true);\n                        }\n                    } else if (hasFinally) {\n                        if (this.prev < entry.finallyLoc) {\n                            return handle(entry.finallyLoc);\n                        }\n                    } else {\n                        throw new Error(\"try statement without catch or finally\");\n                    }\n                }\n            }\n        },\n        abrupt: function(type, arg) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n                    var finallyEntry = entry;\n                    break;\n                }\n            }\n            if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n                // Ignore the finally entry if control is not jumping to a\n                // location outside the try/catch block.\n                finallyEntry = null;\n            }\n            var record = finallyEntry ? finallyEntry.completion : {};\n            record.type = type;\n            record.arg = arg;\n            if (finallyEntry) {\n                this.method = \"next\";\n                this.next = finallyEntry.finallyLoc;\n                return ContinueSentinel;\n            }\n            return this.complete(record);\n        },\n        complete: function(record, afterLoc) {\n            if (record.type === \"throw\") {\n                throw record.arg;\n            }\n            if (record.type === \"break\" || record.type === \"continue\") {\n                this.next = record.arg;\n            } else if (record.type === \"return\") {\n                this.rval = this.arg = record.arg;\n                this.method = \"return\";\n                this.next = \"end\";\n            } else if (record.type === \"normal\" && afterLoc) {\n                this.next = afterLoc;\n            }\n            return ContinueSentinel;\n        },\n        finish: function(finallyLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.finallyLoc === finallyLoc) {\n                    this.complete(entry.completion, entry.afterLoc);\n                    resetTryEntry(entry);\n                    return ContinueSentinel;\n                }\n            }\n        },\n        \"catch\": function(tryLoc) {\n            for(var i = this.tryEntries.length - 1; i >= 0; --i){\n                var entry = this.tryEntries[i];\n                if (entry.tryLoc === tryLoc) {\n                    var record = entry.completion;\n                    if (record.type === \"throw\") {\n                        var thrown = record.arg;\n                        resetTryEntry(entry);\n                    }\n                    return thrown;\n                }\n            }\n            // The context.catch method must only be called with a location\n            // argument that corresponds to a known catch block.\n            throw new Error(\"illegal catch attempt\");\n        },\n        delegateYield: function(iterable, resultName, nextLoc) {\n            this.delegate = {\n                iterator: values(iterable),\n                resultName: resultName,\n                nextLoc: nextLoc\n            };\n            if (this.method === \"next\") {\n                // Deliberately forget the last sent value so that we don't\n                // accidentally pass it on to the delegate.\n                this.arg = undefined;\n            }\n            return ContinueSentinel;\n        }\n    };\n    // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n    return exports;\n}(// If this script is executing as a CommonJS module, use module.exports\n// as the regeneratorRuntime namespace. Otherwise create a new empty\n// object. Either way, the resulting object will be used to initialize\n// the regeneratorRuntime variable at the top of this file.\n true ? module.exports : 0);\ntry {\n    regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, in modern engines\n    // we can explicitly access globalThis. In older engines we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    if (typeof globalThis === \"object\") {\n        globalThis.regeneratorRuntime = runtime;\n    } else {\n        Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/regenerator-runtime/runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/toggle-selection/index.js":
/*!************************************************!*\
  !*** ./node_modules/toggle-selection/index.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nmodule.exports = function() {\n    var selection = document.getSelection();\n    if (!selection.rangeCount) {\n        return function() {};\n    }\n    var active = document.activeElement;\n    var ranges = [];\n    for(var i = 0; i < selection.rangeCount; i++){\n        ranges.push(selection.getRangeAt(i));\n    }\n    switch(active.tagName.toUpperCase()){\n        case \"INPUT\":\n        case \"TEXTAREA\":\n            active.blur();\n            break;\n        default:\n            active = null;\n            break;\n    }\n    selection.removeAllRanges();\n    return function() {\n        selection.type === \"Caret\" && selection.removeAllRanges();\n        if (!selection.rangeCount) {\n            ranges.forEach(function(range) {\n                selection.addRange(range);\n            });\n        }\n        active && active.focus();\n    };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy90b2dnbGUtc2VsZWN0aW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFDQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsSUFBSUMsWUFBWUMsU0FBU0MsWUFBWTtJQUNyQyxJQUFJLENBQUNGLFVBQVVHLFVBQVUsRUFBRTtRQUN6QixPQUFPLFlBQWE7SUFDdEI7SUFDQSxJQUFJQyxTQUFTSCxTQUFTSSxhQUFhO0lBRW5DLElBQUlDLFNBQVMsRUFBRTtJQUNmLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxVQUFVRyxVQUFVLEVBQUVJLElBQUs7UUFDN0NELE9BQU9FLElBQUksQ0FBQ1IsVUFBVVMsVUFBVSxDQUFDRjtJQUNuQztJQUVBLE9BQVFILE9BQU9NLE9BQU8sQ0FBQ0MsV0FBVztRQUNoQyxLQUFLO1FBQ0wsS0FBSztZQUNIUCxPQUFPUSxJQUFJO1lBQ1g7UUFFRjtZQUNFUixTQUFTO1lBQ1Q7SUFDSjtJQUVBSixVQUFVYSxlQUFlO0lBQ3pCLE9BQU87UUFDTGIsVUFBVWMsSUFBSSxLQUFLLFdBQ25CZCxVQUFVYSxlQUFlO1FBRXpCLElBQUksQ0FBQ2IsVUFBVUcsVUFBVSxFQUFFO1lBQ3pCRyxPQUFPUyxPQUFPLENBQUMsU0FBU0MsS0FBSztnQkFDM0JoQixVQUFVaUIsUUFBUSxDQUFDRDtZQUNyQjtRQUNGO1FBRUFaLFVBQ0FBLE9BQU9jLEtBQUs7SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy90b2dnbGUtc2VsZWN0aW9uL2luZGV4LmpzPzViYWUiXSwic291cmNlc0NvbnRlbnQiOlsiXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHNlbGVjdGlvbiA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpO1xuICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICB9XG4gIHZhciBhY3RpdmUgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXG4gIHZhciByYW5nZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3Rpb24ucmFuZ2VDb3VudDsgaSsrKSB7XG4gICAgcmFuZ2VzLnB1c2goc2VsZWN0aW9uLmdldFJhbmdlQXQoaSkpO1xuICB9XG5cbiAgc3dpdGNoIChhY3RpdmUudGFnTmFtZS50b1VwcGVyQ2FzZSgpKSB7IC8vIC50b1VwcGVyQ2FzZSBoYW5kbGVzIFhIVE1MXG4gICAgY2FzZSAnSU5QVVQnOlxuICAgIGNhc2UgJ1RFWFRBUkVBJzpcbiAgICAgIGFjdGl2ZS5ibHVyKCk7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBhY3RpdmUgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgc2VsZWN0aW9uLnR5cGUgPT09ICdDYXJldCcgJiZcbiAgICBzZWxlY3Rpb24ucmVtb3ZlQWxsUmFuZ2VzKCk7XG5cbiAgICBpZiAoIXNlbGVjdGlvbi5yYW5nZUNvdW50KSB7XG4gICAgICByYW5nZXMuZm9yRWFjaChmdW5jdGlvbihyYW5nZSkge1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWN0aXZlICYmXG4gICAgYWN0aXZlLmZvY3VzKCk7XG4gIH07XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzZWxlY3Rpb24iLCJkb2N1bWVudCIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwicmFuZ2VzIiwiaSIsInB1c2giLCJnZXRSYW5nZUF0IiwidGFnTmFtZSIsInRvVXBwZXJDYXNlIiwiYmx1ciIsInJlbW92ZUFsbFJhbmdlcyIsInR5cGUiLCJmb3JFYWNoIiwicmFuZ2UiLCJhZGRSYW5nZSIsImZvY3VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/toggle-selection/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/SpeechSetup.tsx":
/*!****************************************!*\
  !*** ./app/components/SpeechSetup.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpeechSetup: function() { return /* binding */ SpeechSetup; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"(app-pages-browser)/./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1__);\n// This file properly sets up regenerator-runtime and browser speech recognition API\n/* __next_internal_client_entry_do_not_use__ SpeechSetup auto */ var _s = $RefreshSig$();\n\n// Import regenerator-runtime directly at top level\n\nfunction SpeechSetup() {\n    _s();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (true) {\n            try {\n                // Ensure regenerator-runtime is available globally\n                if (!window.regeneratorRuntime) {\n                    window.regeneratorRuntime = __webpack_require__(/*! regenerator-runtime */ \"(app-pages-browser)/./node_modules/regenerator-runtime/runtime.js\");\n                    console.log(\"Regenerator runtime initialized successfully\");\n                }\n                // Set up browser-specific speech recognition\n                window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n                if (!window.SpeechRecognition) {\n                    console.warn(\"Speech Recognition API is not supported in this browser. Please use Chrome, Edge, or Safari.\");\n                } else {\n                    console.log(\"Speech Recognition API initialized successfully\");\n                }\n            } catch (error) {\n                console.error(\"Failed to initialize speech recognition:\", error);\n            }\n        }\n    }, []);\n    return null; // This component doesn't render anything\n}\n_s(SpeechSetup, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SpeechSetup;\nvar _c;\n$RefreshReg$(_c, \"SpeechSetup\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL1NwZWVjaFNldHVwLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLG9GQUFvRjs7QUFHbEQ7QUFFbEMsbURBQW1EO0FBQ2Q7QUFXOUIsU0FBU0M7O0lBQ2RELGdEQUFTQSxDQUFDO1FBQ1IsSUFBSSxJQUFrQixFQUFhO1lBQ2pDLElBQUk7Z0JBQ0YsbURBQW1EO2dCQUNuRCxJQUFJLENBQUNFLE9BQU9DLGtCQUFrQixFQUFFO29CQUM5QkQsT0FBT0Msa0JBQWtCLEdBQUdDLG1CQUFPQSxDQUFDO29CQUNwQ0MsUUFBUUMsR0FBRyxDQUFDO2dCQUNkO2dCQUVBLDZDQUE2QztnQkFDN0NKLE9BQU9LLGlCQUFpQixHQUFHTCxPQUFPSyxpQkFBaUIsSUFDekJMLE9BQU9NLHVCQUF1QjtnQkFFeEQsSUFBSSxDQUFDTixPQUFPSyxpQkFBaUIsRUFBRTtvQkFDN0JGLFFBQVFJLElBQUksQ0FBQztnQkFDZixPQUFPO29CQUNMSixRQUFRQyxHQUFHLENBQUM7Z0JBQ2Q7WUFDRixFQUFFLE9BQU9JLE9BQU87Z0JBQ2RMLFFBQVFLLEtBQUssQ0FBQyw0Q0FBNENBO1lBQzVEO1FBQ0Y7SUFDRixHQUFHLEVBQUU7SUFFTCxPQUFPLE1BQU0seUNBQXlDO0FBQ3hEO0dBMUJnQlQ7S0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2NvbXBvbmVudHMvU3BlZWNoU2V0dXAudHN4P2Y5N2EiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIHByb3Blcmx5IHNldHMgdXAgcmVnZW5lcmF0b3ItcnVudGltZSBhbmQgYnJvd3NlciBzcGVlY2ggcmVjb2duaXRpb24gQVBJXG4ndXNlIGNsaWVudCc7XG5cbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcblxuLy8gSW1wb3J0IHJlZ2VuZXJhdG9yLXJ1bnRpbWUgZGlyZWN0bHkgYXQgdG9wIGxldmVsXG5pbXBvcnQgJ3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSc7XG5cbi8vIEFkZCBhIGdsb2JhbCBkZWNsYXJhdGlvbiBmb3IgVHlwZVNjcmlwdFxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICB3ZWJraXRTcGVlY2hSZWNvZ25pdGlvbjogYW55O1xuICAgIFNwZWVjaFJlY29nbml0aW9uOiBhbnk7XG4gICAgcmVnZW5lcmF0b3JSdW50aW1lOiBhbnk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNwZWVjaFNldHVwKCkge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gRW5zdXJlIHJlZ2VuZXJhdG9yLXJ1bnRpbWUgaXMgYXZhaWxhYmxlIGdsb2JhbGx5XG4gICAgICAgIGlmICghd2luZG93LnJlZ2VuZXJhdG9yUnVudGltZSkge1xuICAgICAgICAgIHdpbmRvdy5yZWdlbmVyYXRvclJ1bnRpbWUgPSByZXF1aXJlKCdyZWdlbmVyYXRvci1ydW50aW1lJyk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1JlZ2VuZXJhdG9yIHJ1bnRpbWUgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFNldCB1cCBicm93c2VyLXNwZWNpZmljIHNwZWVjaCByZWNvZ25pdGlvblxuICAgICAgICB3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gPSB3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gfHwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LndlYmtpdFNwZWVjaFJlY29nbml0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiAoIXdpbmRvdy5TcGVlY2hSZWNvZ25pdGlvbikge1xuICAgICAgICAgIGNvbnNvbGUud2FybignU3BlZWNoIFJlY29nbml0aW9uIEFQSSBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3Nlci4gUGxlYXNlIHVzZSBDaHJvbWUsIEVkZ2UsIG9yIFNhZmFyaS4nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnU3BlZWNoIFJlY29nbml0aW9uIEFQSSBpbml0aWFsaXplZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGluaXRpYWxpemUgc3BlZWNoIHJlY29nbml0aW9uOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIFtdKTtcbiAgXG4gIHJldHVybiBudWxsOyAvLyBUaGlzIGNvbXBvbmVudCBkb2Vzbid0IHJlbmRlciBhbnl0aGluZ1xufSAiXSwibmFtZXMiOlsidXNlRWZmZWN0IiwiU3BlZWNoU2V0dXAiLCJ3aW5kb3ciLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJyZXF1aXJlIiwiY29uc29sZSIsImxvZyIsIlNwZWVjaFJlY29nbml0aW9uIiwid2Via2l0U3BlZWNoUmVjb2duaXRpb24iLCJ3YXJuIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/SpeechSetup.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.client.tsx":
/*!*****************************!*\
  !*** ./app/page.client.tsx ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ClientHome; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"(app-pages-browser)/./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_speech_recognition__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-speech-recognition */ \"(app-pages-browser)/./node_modules/react-speech-recognition/lib/index.js\");\n/* harmony import */ var react_use_clipboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-use-clipboard */ \"(app-pages-browser)/./node_modules/react-use-clipboard/dist/react-use-clipboard.module.js\");\n/* harmony import */ var _app_components_SpeechSetup__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../app/components/SpeechSetup */ \"(app-pages-browser)/./app/components/SpeechSetup.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\nfunction ClientHome() {\n    _s();\n    const [speechInitialized, setSpeechInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [isListening, setIsListening] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [response, setResponse] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [textInput, setTextInput] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [conversation, setConversation] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)([]);\n    const [textToCopy, setTextToCopy] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"\");\n    const [isCopied, setCopyToClipboard] = (0,react_use_clipboard__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(textToCopy, {\n        successDuration: 2000\n    });\n    const [microphoneError, setMicrophoneError] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(null);\n    const inputRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const chatContainerRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        try {\n            if ( true && !window.regeneratorRuntime) {\n                window.regeneratorRuntime = __webpack_require__(/*! regenerator-runtime */ \"(app-pages-browser)/./node_modules/regenerator-runtime/runtime.js\");\n            }\n            setSpeechInitialized(true);\n        } catch (error) {\n            console.error(\"Failed to initialize regenerator-runtime:\", error);\n        }\n    }, []);\n    // RevX business information database\n    const businessInfo = {\n        name: \"RevX\",\n        description: \"RevX is a comprehensive technology and digital solutions provider specializing in software development, digital marketing, data science, AI solutions, and OTA (Online Travel Agency) revenue optimization. We help businesses maximize their revenue through strategic partnerships with major OTAs and enhanced digital presence.\",\n        services: [\n            \"Software Development\",\n            \"SEO\",\n            \"Digital Marketing\",\n            \"OTA Solutions\",\n            \"Revenue Optimization\",\n            \"Brand Enhancement\",\n            \"Meta Search Optimization\"\n        ],\n        specialization: \"RevX specializes in comprehensive digital solutions with a strong focus on OTA partnerships and revenue optimization. We help businesses maximize their presence across major travel platforms while strengthening their brand identity.\",\n        experience: \"With years of experience in the travel and hospitality industry, RevX has successfully helped numerous businesses optimize their OTA presence and increase revenue through strategic partnerships and digital optimization.\",\n        expertise: {\n            softwareDevelopment: {\n                services: [\n                    \"Custom Software Solutions\",\n                    \"Web Applications\",\n                    \"Mobile Apps\",\n                    \"API Development\",\n                    \"Cloud Solutions\",\n                    \"Legacy System Modernization\"\n                ],\n                benefits: [\n                    \"Scalable and maintainable solutions\",\n                    \"Improved operational efficiency\",\n                    \"Enhanced user experience\",\n                    \"Cost-effective development\"\n                ]\n            },\n            digitalMarketing: {\n                services: [\n                    \"Search Engine Optimization (SEO)\",\n                    \"Social Media Marketing\",\n                    \"Content Marketing\",\n                    \"Email Marketing\",\n                    \"PPC Advertising\",\n                    \"Brand Strategy\"\n                ],\n                benefits: [\n                    \"Increased online visibility\",\n                    \"Higher conversion rates\",\n                    \"Better customer engagement\",\n                    \"Improved brand recognition\"\n                ]\n            },\n            dataScience: {\n                services: [\n                    \"Data Analytics\",\n                    \"Business Intelligence\",\n                    \"Predictive Modeling\",\n                    \"Performance Analytics\",\n                    \"Market Research\",\n                    \"Competitive Analysis\"\n                ],\n                benefits: [\n                    \"Data-driven decision making\",\n                    \"Improved business insights\",\n                    \"Better market understanding\",\n                    \"Enhanced performance tracking\"\n                ]\n            },\n            aiSolutions: {\n                services: [\n                    \"AI Integration\",\n                    \"Machine Learning\",\n                    \"Natural Language Processing\",\n                    \"Computer Vision\",\n                    \"Predictive Analytics\",\n                    \"Automation Solutions\"\n                ],\n                benefits: [\n                    \"Automated processes\",\n                    \"Enhanced efficiency\",\n                    \"Improved accuracy\",\n                    \"Cost reduction\"\n                ]\n            },\n            otaSolutions: {\n                services: [\n                    \"OTA Channel Management\",\n                    \"Revenue Optimization\",\n                    \"Rate Parity Management\",\n                    \"Inventory Distribution\",\n                    \"Booking Engine Integration\",\n                    \"Performance Analytics\"\n                ],\n                benefits: [\n                    \"Maximized OTA revenue\",\n                    \"Optimized pricing strategy\",\n                    \"Enhanced market presence\",\n                    \"Improved booking conversion\"\n                ]\n            }\n        },\n        caseStudies: [\n            {\n                title: \"OTA Revenue Optimization\",\n                description: \"Successfully helped a hotel chain increase their OTA revenue by 40% through strategic partnerships with major platforms like Booking.com, Agoda, and Expedia.\",\n                results: \"40% revenue increase, improved market presence, enhanced brand visibility\"\n            },\n            {\n                title: \"Digital Transformation\",\n                description: \"Implemented comprehensive digital solutions for a hospitality group, including OTA integration and revenue management systems.\",\n                results: \"25% increase in direct bookings, 35% improvement in OTA performance\"\n            }\n        ],\n        contact: {\n            email: \"info@revx.pro\",\n            phone: \"+1 5107340774\",\n            address: \"Richmond California, USA\",\n            website: \"https://revx.pro\",\n            nepalOffice: {\n                address: \"Sherpa Mall, Durbarmarg, Kathmandu, Nepal\",\n                phone: \"+9779820151343\",\n                mobile: \"+9779856031513\",\n                whatsapp: \"+977985031513\"\n            }\n        },\n        blogs: [\n            \"OTA Revenue Optimization Strategies\",\n            \"Maximizing Your Presence on Booking.com\",\n            \"Effective Rate Parity Management\",\n            \"Digital Marketing for Hospitality\",\n            \"AI in Travel Industry\",\n            \"Meta Search Optimization\"\n        ],\n        otaPartners: [\n            \"Booking.com\",\n            \"Agoda\",\n            \"Ctrip\",\n            \"Trip.com\",\n            \"MakeMyTrip\",\n            \"Expedia\"\n        ],\n        metaSearchPlatforms: [\n            \"Google Hotel Ads\",\n            \"TripAdvisor\",\n            \"Kayak\",\n            \"Skyscanner\",\n            \"Trivago\"\n        ]\n    };\n    const handleQuery = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(async (query)=>{\n        let response = \"\";\n        const lowercaseQuery = query.toLowerCase();\n        // Add user message to conversation\n        setConversation((prev)=>[\n                ...prev,\n                {\n                    type: \"user\",\n                    content: query\n                }\n            ]);\n        // Enhanced greetings and common phrases handling with more variations\n        if (lowercaseQuery.match(/(hello|hi|hey|greetings|good\\s+(morning|afternoon|evening|day)|howdy|yo|sup)/i)) {\n            const timeOfDay = new Date().getHours();\n            let greeting = \"Hello\";\n            if (timeOfDay < 12) greeting = \"Good morning\";\n            else if (timeOfDay < 17) greeting = \"Good afternoon\";\n            else greeting = \"Good evening\";\n            response = \"\".concat(greeting, \"! I'm Spu, RevX's AI assistant. How can I help you today? Feel free to ask about our services, success stories, or how to get in touch with us.\");\n        } else if (lowercaseQuery.match(/(how\\s+are\\s+you|how're\\s+you|how\\s+you\\s+doing|how's\\s+it\\s+going|what's\\s+up|what\\s+is\\s+up|what\\s+are\\s+you\\s+up\\s+to)/i)) {\n            response = \"I'm doing great, thank you for asking! I'm here to help you learn more about RevX. What would you like to know?\";\n        } else if (lowercaseQuery.match(/(thank\\s+you|thanks|appreciate\\s+it|thank\\s+you\\s+so\\s+much|thanks\\s+a\\s+lot|grateful)/i)) {\n            response = \"You're welcome! Is there anything else you'd like to know about RevX?\";\n        } else if (lowercaseQuery.match(/(bye|goodbye|see\\s+you|talk\\s+to\\s+you\\s+later|have\\s+a\\s+good\\s+day|take\\s+care)/i)) {\n            response = \"Thank you for your interest in RevX! If you need any further assistance, don't hesitate to reach out. Have a great day!\";\n        } else if (lowercaseQuery.match(/(who\\s+is\\s+revx|about\\s+revx|what\\s+is\\s+revx|tell\\s+me\\s+about|what\\s+does\\s+revx\\s+do|revx\\s+company|revx\\s+services|revx\\s+description)/i)) {\n            response = businessInfo.description;\n        } else if (lowercaseQuery.match(/(services|what\\s+do\\s+you\\s+offer|offer|provide|what\\s+can\\s+you\\s+do|what\\s+are\\s+your\\s+services|what\\s+services\\s+do\\s+you\\s+provide)/i)) {\n            response = \"RevX offers a comprehensive suite of services including: \".concat(businessInfo.services.join(\", \"), \".\");\n        } else if (lowercaseQuery.match(/(specialization|specialize|industry|what\\s+do\\s+you\\s+specialize\\s+in|what's\\s+your\\s+specialty|what\\s+is\\s+your\\s+expertise)/i)) {\n            response = \"RevX specializes in enhancing digital presence and revenue of businesses, particularly in the \".concat(businessInfo.specialization, \".\");\n        } else if (lowercaseQuery.match(/(experience|how\\s+long|years\\s+of\\s+experience|how\\s+many\\s+years|how\\s+long\\s+have\\s+you\\s+been)/i)) {\n            response = \"RevX has \".concat(businessInfo.experience, \" of experience in the digital consulting industry.\");\n        } else if (lowercaseQuery.match(/(case\\s+stud|success\\s+stor|client\\s+success|testimonial|portfolio|projects|work\\s+examples|previous\\s+work)/i)) {\n            const caseStudiesText = businessInfo.caseStudies.map((cs)=>\"\".concat(cs.title, \": \").concat(cs.description, \". Results: \").concat(cs.results, \".\")).join(\"\\n\\n\");\n            response = \"Here are some of RevX's success stories:\\n\\n\".concat(caseStudiesText);\n        } else if (lowercaseQuery.match(/(contact|reach|get\\s+in\\s+touch|call|phone|email|where\\s+are\\s+you|how\\s+to\\s+contact|contact\\s+information)/i)) {\n            response = \"You can contact RevX at:\\n\\nHeadquarters:\\nEmail: \".concat(businessInfo.contact.email, \"\\nPhone: \").concat(businessInfo.contact.phone, \"\\nAddress: \").concat(businessInfo.contact.address, \"\\n\\nNepal Office:\\nPhone: \").concat(businessInfo.contact.nepalOffice.phone, \"\\nMobile: \").concat(businessInfo.contact.nepalOffice.mobile, \"\\nWhatsApp: \").concat(businessInfo.contact.nepalOffice.whatsapp, \"\\nAddress: \").concat(businessInfo.contact.nepalOffice.address);\n        } else if (lowercaseQuery.match(/(usa|us\\s+office|united\\s+states|california|richmond)/i)) {\n            response = \"RevX's office is located in \".concat(businessInfo.contact.address, \". You can reach them at \").concat(businessInfo.contact.phone, \".\");\n        } else if (lowercaseQuery.match(/(blog|insight|article|thought\\s+leadership|resources|content|publications)/i)) {\n            response = \"RevX shares insights through their blog, covering topics such as:\\n\\n- \".concat(businessInfo.blogs.join(\"\\n- \"));\n        } else if (lowercaseQuery.match(/(revenue\\s+maximization|increase\\s+revenue|boost\\s+revenue|improve\\s+revenue|revenue\\s+optimization|revenue\\s+management)/i)) {\n            response = \"RevX's revenue maximization strategies focus on optimizing pricing, improving operational efficiency, and enhancing customer experience. We help businesses identify new revenue streams, reduce costs, and implement data-driven decision-making processes.\";\n        } else if (lowercaseQuery.match(/(website|site|url|web\\s+address|online\\s+presence|web\\s+presence)/i)) {\n            response = \"You can visit RevX's website at \".concat(businessInfo.contact.website);\n        } else if (lowercaseQuery.match(/(digital\\s+marketing|marketing\\s+services|seo|social\\s+media|online\\s+marketing|digital\\s+advertising|content\\s+marketing)/i)) {\n            const dm = businessInfo.expertise.digitalMarketing;\n            response = \"RevX offers comprehensive digital marketing services including \".concat(dm.services.join(\", \"), \". These services help businesses achieve \").concat(dm.benefits.join(\", \"), \".\");\n        } else if (lowercaseQuery.match(/(ecommerce|online\\s+store|digital\\s+commerce|online\\s+retail|e-commerce|electronic\\s+commerce|online\\s+shopping)/i)) {\n            response = \"RevX provides comprehensive e-commerce solutions including custom platform development, payment integration, inventory management, and customer analytics. Our solutions help businesses create successful online stores with enhanced user experience and increased sales.\";\n        } else if (lowercaseQuery.match(/(development|programming|coding|app\\s+development|website\\s+development|software\\s+development|web\\s+development|mobile\\s+development)/i)) {\n            const sd = businessInfo.expertise.softwareDevelopment;\n            response = \"RevX provides comprehensive development services including \".concat(sd.services.join(\", \"), \". These solutions offer \").concat(sd.benefits.join(\", \"), \".\");\n        } else if (lowercaseQuery.match(/(ai|artificial\\s+intelligence|machine\\s+learning|deep\\s+learning|smart\\s+technology|automation)/i)) {\n            response = \"RevX specializes in AI integration and development, helping businesses leverage artificial intelligence for improved efficiency, customer experience, and decision-making. Our AI solutions include predictive analytics, automated processes, and intelligent customer service systems.\";\n        } else if (lowercaseQuery.match(/(revenue|profit|income|earnings|financial|business\\s+growth|profitability|monetization)/i)) {\n            response = \"RevX's revenue maximization strategies focus on optimizing pricing, improving operational efficiency, and enhancing customer experience. We help businesses identify new revenue streams, reduce costs, and implement data-driven decision-making processes.\";\n        } else if (lowercaseQuery.match(/(software\\s+development|web\\s+development|app\\s+development|programming|coding|development\\s+services)/i)) {\n            const sd = businessInfo.expertise.softwareDevelopment;\n            response = \"RevX provides software development services including \".concat(sd.services.join(\", \"), \". These solutions offer \").concat(sd.benefits.join(\", \"), \".\");\n        } else if (lowercaseQuery.match(/(data\\s+science|data\\s+analytics|big\\s+data|machine\\s+learning|predictive\\s+analytics|business\\s+intelligence)/i)) {\n            const ds = businessInfo.expertise.dataScience;\n            response = \"RevX's data science solutions include \".concat(ds.services.join(\", \"), \". These services help businesses achieve \").concat(ds.benefits.join(\", \"), \".\");\n        } else if (lowercaseQuery.match(/(ai|artificial\\s+intelligence|machine\\s+learning|nlp|computer\\s+vision|ai\\s+solutions)/i)) {\n            const ai = businessInfo.expertise.aiSolutions;\n            response = \"RevX offers AI solutions including \".concat(ai.services.join(\", \"), \". These services provide \").concat(ai.benefits.join(\", \"), \".\");\n        } else if (lowercaseQuery.match(/(ota|online\\s+travel|booking\\.com|agoda|ctrip|trip\\.com|makemytrip|expedia|travel\\s+platform|booking\\s+platform)/i)) {\n            const otaServices = businessInfo.expertise.otaSolutions.services.join(\", \");\n            const otaBenefits = businessInfo.expertise.otaSolutions.benefits.join(\", \");\n            const otaPartners = businessInfo.otaPartners.join(\", \");\n            response = \"RevX provides comprehensive OTA solutions including \".concat(otaServices, \". We work with major platforms like \").concat(otaPartners, \" to help businesses maximize their revenue. Our solutions offer \").concat(otaBenefits, \".\");\n        } else if (lowercaseQuery.match(/(revenue\\s+optimization|boost\\s+revenue|increase\\s+revenue|maximize\\s+revenue|revenue\\s+management|pricing\\s+strategy)/i)) {\n            response = \"RevX specializes in revenue optimization through strategic OTA partnerships and digital solutions. We help businesses maximize their revenue by optimizing pricing strategies, managing rate parity, and enhancing their presence across major travel platforms.\";\n        } else if (lowercaseQuery.match(/(meta\\s+search|google\\s+hotel|tripadvisor|kayak|skyscanner|trivago|travel\\s+search)/i)) {\n            const metaPlatforms = businessInfo.metaSearchPlatforms.join(\", \");\n            response = \"RevX helps businesses optimize their presence on major meta-search platforms including \".concat(metaPlatforms, \". We implement strategies to improve visibility and conversion rates across these platforms.\");\n        } else if (lowercaseQuery.match(/(brand\\s+enhancement|branding|brand\\s+visibility|brand\\s+presence|brand\\s+recognition)/i)) {\n            response = \"RevX provides comprehensive brand enhancement services to improve your presence across OTAs and meta-search platforms. We help businesses strengthen their brand identity and increase visibility to potential customers.\";\n        } else if (lowercaseQuery.match(/(website|web\\s+site|web\\s+development|web\\s+design|web\\s+presence|online\\s+presence)/i)) {\n            response = \"RevX offers comprehensive website development services including custom web applications, responsive design, e-commerce solutions, and web optimization. Our solutions are built with modern technologies and best practices to ensure high performance and user experience.\";\n        } else if (lowercaseQuery.match(/(mobile\\s+app|mobile\\s+application|app\\s+development|ios|android|cross\\s+platform)/i)) {\n            response = \"RevX develops mobile applications for both iOS and Android platforms, as well as cross-platform solutions. Our mobile app development services include native app development, hybrid app development, and progressive web apps (PWAs).\";\n        } else if (lowercaseQuery.match(/(it\\s+consulting|consulting\\s+services|technology\\s+consulting|digital\\s+transformation|tech\\s+consulting)/i)) {\n            response = \"RevX provides IT consulting services to help businesses navigate digital transformation, optimize their technology stack, and implement innovative solutions. Our consulting team offers expertise in software architecture, cloud solutions, and technology strategy.\";\n        } else if (lowercaseQuery.match(/(software\\s+architecture|architecture\\s+design|system\\s+design|technical\\s+architecture|solution\\s+architecture)/i)) {\n            response = \"RevX offers software architecture design services to create scalable, maintainable, and efficient systems. Our architects design robust solutions that align with business goals and technical requirements.\";\n        } else if (lowercaseQuery.match(/(cloud|cloud\\s+computing|cloud\\s+solutions|aws|azure|google\\s+cloud)/i)) {\n            response = \"RevX provides cloud solutions and services, including cloud migration, cloud-native development, and cloud infrastructure management. We work with major cloud providers like AWS, Azure, and Google Cloud.\";\n        } else if (lowercaseQuery.match(/(api|api\\s+development|rest\\s+api|graphql|api\\s+integration|web\\s+services)/i)) {\n            response = \"RevX develops and integrates APIs using modern technologies and best practices. Our API services include RESTful APIs, GraphQL, microservices architecture, and API security implementation.\";\n        } else if (lowercaseQuery.match(/(ui|ux|user\\s+interface|user\\s+experience|design|interface\\s+design)/i)) {\n            response = \"RevX offers UI/UX design services to create intuitive, user-friendly interfaces. Our design team focuses on creating engaging experiences that enhance user satisfaction and drive business goals.\";\n        } else if (lowercaseQuery.match(/(qa|quality\\s+assurance|testing|software\\s+testing|test\\s+automation|quality\\s+testing)/i)) {\n            response = \"RevX provides comprehensive quality assurance services, including manual testing, automated testing, performance testing, and security testing. We ensure high-quality software delivery through rigorous testing processes.\";\n        } else if (lowercaseQuery.match(/(devops|continuous\\s+integration|continuous\\s+deployment|ci|cd|automation)/i)) {\n            response = \"RevX offers DevOps services to streamline software development and deployment processes. Our services include CI/CD pipeline setup, infrastructure automation, containerization, and monitoring solutions.\";\n        } else if (lowercaseQuery.match(/(business\\s+intelligence|bi|analytics|reporting|data\\s+visualization|dashboard)/i)) {\n            response = \"RevX provides business intelligence solutions to help organizations make data-driven decisions. Our services include data visualization, dashboard development, reporting systems, and analytics platforms.\";\n        } else if (lowercaseQuery.match(/(machine\\s+learning|ml|deep\\s+learning|neural\\s+networks|predictive\\s+modeling)/i)) {\n            response = \"RevX develops machine learning solutions for various business applications. Our services include predictive modeling, natural language processing, computer vision, and custom ML model development.\";\n        } else if (lowercaseQuery.match(/(big\\s+data|data\\s+processing|data\\s+warehouse|data\\s+lake|data\\s+analytics)/i)) {\n            response = \"RevX offers big data solutions to help organizations process and analyze large volumes of data. Our services include data warehousing, data lake implementation, real-time analytics, and data processing pipelines.\";\n        } else if (lowercaseQuery.match(/(digital\\s+transformation|digital\\s+strategy|digital\\s+initiative|digital\\s+change|digital\\s+modernization)/i)) {\n            response = \"RevX helps businesses navigate digital transformation by developing comprehensive strategies and implementing modern solutions. Our services include digital strategy consulting, process optimization, and technology modernization.\";\n        } else {\n            response = \"I'm not sure I understand your question. You can ask me about RevX's services, case studies, contact information, or specific topics like digital marketing, e-commerce, development, or revenue optimization. How else can I assist you?\";\n        }\n        setResponse(response);\n        // Add assistant response to conversation\n        setConversation((prev)=>[\n                ...prev,\n                {\n                    type: \"assistant\",\n                    content: response\n                }\n            ]);\n    }, []);\n    const commands = [\n        {\n            command: [\n                \"hello\",\n                \"hi\",\n                \"hey\",\n                \"good morning\",\n                \"good afternoon\",\n                \"good evening\",\n                \"howdy\"\n            ],\n            callback: ()=>handleQuery(\"hello\")\n        },\n        {\n            command: [\n                \"how are you\",\n                \"how's it going\",\n                \"how you doing\"\n            ],\n            callback: ()=>handleQuery(\"how are you\")\n        },\n        {\n            command: [\n                \"thank you\",\n                \"thanks\",\n                \"appreciate it\"\n            ],\n            callback: ()=>handleQuery(\"thank you\")\n        },\n        {\n            command: [\n                \"goodbye\",\n                \"bye\",\n                \"see you\",\n                \"talk to you later\"\n            ],\n            callback: ()=>handleQuery(\"goodbye\")\n        },\n        {\n            command: [\n                \"what is RevX\",\n                \"who is RevX\",\n                \"tell me about RevX\"\n            ],\n            callback: ()=>handleQuery(\"about revx\")\n        },\n        {\n            command: \"what services do you offer\",\n            callback: ()=>handleQuery(\"services\")\n        },\n        {\n            command: [\n                \"how can I contact you\",\n                \"contact information\"\n            ],\n            callback: ()=>handleQuery(\"contact\")\n        },\n        {\n            command: [\n                \"case studies\",\n                \"success stories\"\n            ],\n            callback: ()=>handleQuery(\"case studies\")\n        },\n        {\n            command: [\n                \"digital marketing\",\n                \"marketing services\",\n                \"seo\",\n                \"social media\"\n            ],\n            callback: ()=>handleQuery(\"digital marketing\")\n        },\n        {\n            command: [\n                \"ecommerce\",\n                \"online store\",\n                \"digital commerce\",\n                \"online retail\"\n            ],\n            callback: ()=>handleQuery(\"ecommerce\")\n        },\n        {\n            command: [\n                \"development\",\n                \"programming\",\n                \"coding\",\n                \"app development\",\n                \"website development\"\n            ],\n            callback: ()=>handleQuery(\"development\")\n        },\n        {\n            command: [\n                \"ai\",\n                \"artificial intelligence\",\n                \"machine learning\"\n            ],\n            callback: ()=>handleQuery(\"ai\")\n        },\n        {\n            command: [\n                \"revenue\",\n                \"profit\",\n                \"income\",\n                \"earnings\"\n            ],\n            callback: ()=>handleQuery(\"revenue\")\n        }\n    ];\n    const { transcript, listening, resetTranscript, browserSupportsSpeechRecognition } = (0,react_speech_recognition__WEBPACK_IMPORTED_MODULE_3__.useSpeechRecognition)();\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (transcript) {\n            setTextInput(transcript);\n            handleQuery(transcript);\n        }\n    }, [\n        transcript\n    ]);\n    const toggleListening = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (listening) {\n            react_speech_recognition__WEBPACK_IMPORTED_MODULE_3__[\"default\"].stopListening();\n            setIsListening(false);\n        } else {\n            resetTranscript();\n            react_speech_recognition__WEBPACK_IMPORTED_MODULE_3__[\"default\"].startListening({\n                continuous: true\n            });\n            setIsListening(true);\n        }\n    }, [\n        listening,\n        resetTranscript\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        try {\n            if (typeof navigator !== \"undefined\" && navigator.mediaDevices) {\n                console.log(\"Requesting microphone permission...\");\n                navigator.mediaDevices.getUserMedia({\n                    audio: true\n                }).then(()=>{\n                    console.log(\"Microphone permission granted\");\n                    setMicrophoneError(null);\n                }).catch((error)=>{\n                    console.error(\"Microphone error:\", error);\n                    setMicrophoneError(error.message || \"Microphone permission denied\");\n                });\n            } else {\n                console.warn(\"MediaDevices API not available in this browser\");\n                setMicrophoneError(\"MediaDevices API not available in this browser. Please use a modern browser.\");\n            }\n        } catch (error) {\n            console.error(\"Error requesting microphone permissions:\", error);\n            setMicrophoneError(\"Error requesting microphone permissions: \" + (error instanceof Error ? error.message : \"Unknown error\"));\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        setIsListening(listening);\n        console.log(\"Speech recognition listening state:\", listening);\n        if (!browserSupportsSpeechRecognition) {\n            console.error(\"Speech recognition is not supported in this browser\");\n            setMicrophoneError(\"Speech recognition is not supported in this browser. Please use Chrome, Edge, or Safari.\");\n        }\n    }, [\n        listening,\n        browserSupportsSpeechRecognition\n    ]);\n    const handleTextSubmit = (e)=>{\n        e.preventDefault();\n        if (textInput.trim()) {\n            handleQuery(textInput);\n            setTextInput(\"\");\n        }\n    };\n    // Auto-scroll to bottom of chat when conversation updates\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)(()=>{\n        if (chatContainerRef.current) {\n            chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n        }\n    }, [\n        conversation\n    ]);\n    if (!speechInitialized) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"p-4 text-center\",\n            children: \"Initializing speech recognition...\"\n        }, void 0, false, {\n            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n            lineNumber: 469,\n            columnNumber: 12\n        }, this);\n    }\n    if (!browserSupportsSpeechRecognition) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                className: \"text-yellow-700\",\n                children: \"Speech recognition is not supported in this browser. Please try Chrome, Edge, or Safari.\"\n            }, void 0, false, {\n                fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                lineNumber: 475,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n            lineNumber: 474,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"min-h-screen bg-gray-100\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_app_components_SpeechSetup__WEBPACK_IMPORTED_MODULE_5__.SpeechSetup, {}, void 0, false, {\n                fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                lineNumber: 485,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"container mx-auto px-4 py-8\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"max-w-4xl mx-auto\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                            className: \"text-3xl font-bold text-center mb-8\",\n                            children: \"RevX AI Assistant\"\n                        }, void 0, false, {\n                            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                            lineNumber: 488,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            ref: chatContainerRef,\n                            className: \"bg-white rounded-lg shadow-lg p-6 mb-6 h-[60vh] overflow-y-auto\",\n                            children: conversation.map((message, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"mb-4 \".concat(message.type === \"user\" ? \"text-right\" : \"text-left\"),\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"inline-block p-3 rounded-lg \".concat(message.type === \"user\" ? \"bg-blue-500 text-white\" : \"bg-gray-200 text-gray-800\"),\n                                        children: message.content\n                                    }, void 0, false, {\n                                        fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                        lineNumber: 502,\n                                        columnNumber: 17\n                                    }, this)\n                                }, index, false, {\n                                    fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                    lineNumber: 496,\n                                    columnNumber: 15\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                            lineNumber: 491,\n                            columnNumber: 11\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"relative\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"flex items-center\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                            ref: inputRef,\n                                            type: \"text\",\n                                            value: textInput,\n                                            onChange: (e)=>setTextInput(e.target.value),\n                                            onKeyPress: (e)=>{\n                                                if (e.key === \"Enter\" && textInput.trim()) {\n                                                    handleQuery(textInput.trim());\n                                                    setTextInput(\"\");\n                                                }\n                                            },\n                                            placeholder: \"Type your message or click the microphone to speak...\",\n                                            className: \"flex-1 p-4 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                                        }, void 0, false, {\n                                            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                            lineNumber: 518,\n                                            columnNumber: 15\n                                        }, this),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                            onClick: toggleListening,\n                                            disabled: !browserSupportsSpeechRecognition,\n                                            className: \"p-4 rounded-r-lg \".concat(isListening ? \"bg-red-500 hover:bg-red-600\" : \"bg-blue-500 hover:bg-blue-600\", \" text-white transition-colors duration-200\"),\n                                            title: isListening ? \"Stop Recording\" : \"Start Recording\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                xmlns: \"http://www.w3.org/2000/svg\",\n                                                className: \"h-6 w-6\",\n                                                fill: \"none\",\n                                                viewBox: \"0 0 24 24\",\n                                                stroke: \"currentColor\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                                    strokeLinecap: \"round\",\n                                                    strokeLinejoin: \"round\",\n                                                    strokeWidth: 2,\n                                                    d: \"M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                                    lineNumber: 549,\n                                                    columnNumber: 19\n                                                }, this)\n                                            }, void 0, false, {\n                                                fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                                lineNumber: 542,\n                                                columnNumber: 17\n                                            }, this)\n                                        }, void 0, false, {\n                                            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                            lineNumber: 532,\n                                            columnNumber: 15\n                                        }, this)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                    lineNumber: 517,\n                                    columnNumber: 13\n                                }, this),\n                                microphoneError && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-red-500 text-sm mt-2\",\n                                    children: microphoneError\n                                }, void 0, false, {\n                                    fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                    lineNumber: 559,\n                                    columnNumber: 15\n                                }, this),\n                                !browserSupportsSpeechRecognition && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                    className: \"text-yellow-500 text-sm mt-2\",\n                                    children: \"Speech recognition is not supported in your browser. Please use Chrome, Edge, or Safari.\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                                    lineNumber: 562,\n                                    columnNumber: 15\n                                }, this)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                            lineNumber: 516,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                    lineNumber: 487,\n                    columnNumber: 9\n                }, this)\n            }, void 0, false, {\n                fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n                lineNumber: 486,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/santoshbaral/Documents/REVX/helpdex/spu-ai/app/page.client.tsx\",\n        lineNumber: 484,\n        columnNumber: 5\n    }, this);\n}\n_s(ClientHome, \"cvy3CZMizrjfGOwHjsjdgrtriws=\", false, function() {\n    return [\n        react_use_clipboard__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n        react_speech_recognition__WEBPACK_IMPORTED_MODULE_3__.useSpeechRecognition\n    ];\n});\n_c = ClientHome;\nvar _c;\n$RefreshReg$(_c, \"ClientHome\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.client.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/head-manager.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/head-manager.js ***!
  \*******************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    DOMAttributeNames: function() {\n        return DOMAttributeNames;\n    },\n    isEqualNode: function() {\n        return isEqualNode;\n    },\n    default: function() {\n        return initHeadManager;\n    }\n});\nconst DOMAttributeNames = {\n    acceptCharset: \"accept-charset\",\n    className: \"class\",\n    htmlFor: \"for\",\n    httpEquiv: \"http-equiv\",\n    noModule: \"noModule\"\n};\nfunction reactElementToDOM(param) {\n    let { type, props } = param;\n    const el = document.createElement(type);\n    for(const p in props){\n        if (!props.hasOwnProperty(p)) continue;\n        if (p === \"children\" || p === \"dangerouslySetInnerHTML\") continue;\n        // we don't render undefined props to the DOM\n        if (props[p] === undefined) continue;\n        const attr = DOMAttributeNames[p] || p.toLowerCase();\n        if (type === \"script\" && (attr === \"async\" || attr === \"defer\" || attr === \"noModule\")) {\n            el[attr] = !!props[p];\n        } else {\n            el.setAttribute(attr, props[p]);\n        }\n    }\n    const { children, dangerouslySetInnerHTML } = props;\n    if (dangerouslySetInnerHTML) {\n        el.innerHTML = dangerouslySetInnerHTML.__html || \"\";\n    } else if (children) {\n        el.textContent = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n    }\n    return el;\n}\nfunction isEqualNode(oldTag, newTag) {\n    if (oldTag instanceof HTMLElement && newTag instanceof HTMLElement) {\n        const nonce = newTag.getAttribute(\"nonce\");\n        // Only strip the nonce if `oldTag` has had it stripped. An element's nonce attribute will not\n        // be stripped if there is no content security policy response header that includes a nonce.\n        if (nonce && !oldTag.getAttribute(\"nonce\")) {\n            const cloneTag = newTag.cloneNode(true);\n            cloneTag.setAttribute(\"nonce\", \"\");\n            cloneTag.nonce = nonce;\n            return nonce === oldTag.nonce && oldTag.isEqualNode(cloneTag);\n        }\n    }\n    return oldTag.isEqualNode(newTag);\n}\nlet updateElements;\nif (false) {} else {\n    updateElements = (type, components)=>{\n        const headEl = document.getElementsByTagName(\"head\")[0];\n        const headCountEl = headEl.querySelector(\"meta[name=next-head-count]\");\n        if (true) {\n            if (!headCountEl) {\n                console.error(\"Warning: next-head-count is missing. https://nextjs.org/docs/messages/next-head-count-missing\");\n                return;\n            }\n        }\n        const headCount = Number(headCountEl.content);\n        const oldTags = [];\n        for(let i = 0, j = headCountEl.previousElementSibling; i < headCount; i++, j = (j == null ? void 0 : j.previousElementSibling) || null){\n            var _j_tagName;\n            if ((j == null ? void 0 : (_j_tagName = j.tagName) == null ? void 0 : _j_tagName.toLowerCase()) === type) {\n                oldTags.push(j);\n            }\n        }\n        const newTags = components.map(reactElementToDOM).filter((newTag)=>{\n            for(let k = 0, len = oldTags.length; k < len; k++){\n                const oldTag = oldTags[k];\n                if (isEqualNode(oldTag, newTag)) {\n                    oldTags.splice(k, 1);\n                    return false;\n                }\n            }\n            return true;\n        });\n        oldTags.forEach((t)=>{\n            var _t_parentNode;\n            return (_t_parentNode = t.parentNode) == null ? void 0 : _t_parentNode.removeChild(t);\n        });\n        newTags.forEach((t)=>headEl.insertBefore(t, headCountEl));\n        headCountEl.content = (headCount - oldTags.length + newTags.length).toString();\n    };\n}\nfunction initHeadManager() {\n    return {\n        mountedInstances: new Set(),\n        updateHead: (head)=>{\n            const tags = {};\n            head.forEach((h)=>{\n                if (// it won't be inlined. In this case revert to the original behavior\n                h.type === \"link\" && h.props[\"data-optimized-fonts\"]) {\n                    if (document.querySelector('style[data-href=\"' + h.props[\"data-href\"] + '\"]')) {\n                        return;\n                    } else {\n                        h.props.href = h.props[\"data-href\"];\n                        h.props[\"data-href\"] = undefined;\n                    }\n                }\n                const components = tags[h.type] || [];\n                components.push(h);\n                tags[h.type] = components;\n            });\n            const titleComponent = tags.title ? tags.title[0] : null;\n            let title = \"\";\n            if (titleComponent) {\n                const { children } = titleComponent.props;\n                title = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n            }\n            if (title !== document.title) document.title = title;\n            [\n                \"meta\",\n                \"base\",\n                \"link\",\n                \"style\",\n                \"script\"\n            ].forEach((type)=>{\n                updateElements(type, tags[type] || []);\n            });\n        }\n    };\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=head-manager.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/head-manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    requestIdleCallback: function() {\n        return requestIdleCallback;\n    },\n    cancelIdleCallback: function() {\n        return cancelIdleCallback;\n    }\n});\nconst requestIdleCallback = typeof self !== \"undefined\" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return self.setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nconst cancelIdleCallback = typeof self !== \"undefined\" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-idle-callback.js.map\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU87QUFDWCxDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHO0lBQ3hCLElBQUksSUFBSUMsUUFBUUQsSUFBSVQsT0FBT0MsY0FBYyxDQUFDTyxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZO1FBQ1pDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFMLFNBQVM7SUFDYkcscUJBQXFCO1FBQ2pCLE9BQU9BO0lBQ1g7SUFDQUMsb0JBQW9CO1FBQ2hCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1ELHNCQUFzQixPQUFPUSxTQUFTLGVBQWVBLEtBQUtSLG1CQUFtQixJQUFJUSxLQUFLUixtQkFBbUIsQ0FBQ1MsSUFBSSxDQUFDQyxXQUFXLFNBQVNDLEVBQUU7SUFDdkksSUFBSUMsUUFBUUMsS0FBS0MsR0FBRztJQUNwQixPQUFPTixLQUFLTyxVQUFVLENBQUM7UUFDbkJKLEdBQUc7WUFDQ0ssWUFBWTtZQUNaQyxlQUFlO2dCQUNYLE9BQU9DLEtBQUtDLEdBQUcsQ0FBQyxHQUFHLEtBQU1OLENBQUFBLEtBQUtDLEdBQUcsS0FBS0YsS0FBSTtZQUM5QztRQUNKO0lBQ0osR0FBRztBQUNQO0FBQ0EsTUFBTVgscUJBQXFCLE9BQU9PLFNBQVMsZUFBZUEsS0FBS1Asa0JBQWtCLElBQUlPLEtBQUtQLGtCQUFrQixDQUFDUSxJQUFJLENBQUNDLFdBQVcsU0FBU1UsRUFBRTtJQUNwSSxPQUFPQyxhQUFhRDtBQUN4QjtBQUVBLElBQUksQ0FBQyxPQUFPdkIsUUFBUXlCLE9BQU8sS0FBSyxjQUFlLE9BQU96QixRQUFReUIsT0FBTyxLQUFLLFlBQVl6QixRQUFReUIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPekIsUUFBUXlCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcks1QixPQUFPQyxjQUFjLENBQUNDLFFBQVF5QixPQUFPLEVBQUUsY0FBYztRQUFFeEIsT0FBTztJQUFLO0lBQ25FSCxPQUFPNkIsTUFBTSxDQUFDM0IsUUFBUXlCLE9BQU8sRUFBRXpCO0lBQy9CRSxPQUFPRixPQUFPLEdBQUdBLFFBQVF5QixPQUFPO0FBQ2xDLEVBRUEsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L3JlcXVlc3QtaWRsZS1jYWxsYmFjay5qcz8xZTIwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuMCAmJiAobW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogbnVsbCxcbiAgICBjYW5jZWxJZGxlQ2FsbGJhY2s6IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgcmVxdWVzdElkbGVDYWxsYmFjazogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0SWRsZUNhbGxiYWNrO1xuICAgIH0sXG4gICAgY2FuY2VsSWRsZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNhbmNlbElkbGVDYWxsYmFjaztcbiAgICB9XG59KTtcbmNvbnN0IHJlcXVlc3RJZGxlQ2FsbGJhY2sgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2sgJiYgc2VsZi5yZXF1ZXN0SWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihjYikge1xuICAgIGxldCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuIHNlbGYuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY2Ioe1xuICAgICAgICAgICAgZGlkVGltZW91dDogZmFsc2UsXG4gICAgICAgICAgICB0aW1lUmVtYWluaW5nOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoMCwgNTAgLSAoRGF0ZS5ub3coKSAtIHN0YXJ0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sIDEpO1xufTtcbmNvbnN0IGNhbmNlbElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrICYmIHNlbGYuY2FuY2VsSWRsZUNhbGxiYWNrLmJpbmQod2luZG93KSB8fCBmdW5jdGlvbihpZCkge1xuICAgIHJldHVybiBjbGVhclRpbWVvdXQoaWQpO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm1vZHVsZSIsInJlcXVlc3RJZGxlQ2FsbGJhY2siLCJjYW5jZWxJZGxlQ2FsbGJhY2siLCJfZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZWxmIiwiYmluZCIsIndpbmRvdyIsImNiIiwic3RhcnQiLCJEYXRlIiwibm93Iiwic2V0VGltZW91dCIsImRpZFRpbWVvdXQiLCJ0aW1lUmVtYWluaW5nIiwiTWF0aCIsIm1heCIsImlkIiwiY2xlYXJUaW1lb3V0IiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/client/script.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/script.js ***!
  \*************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    handleClientScriptLoad: function() {\n        return handleClientScriptLoad;\n    },\n    initScriptLoader: function() {\n        return initScriptLoader;\n    },\n    default: function() {\n        return _default;\n    }\n});\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_default.js\");\nconst _interop_require_wildcard = __webpack_require__(/*! @swc/helpers/_/_interop_require_wildcard */ \"(app-pages-browser)/./node_modules/@swc/helpers/esm/_interop_require_wildcard.js\");\nconst _jsxruntime = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nconst _reactdom = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\"));\nconst _react = /*#__PURE__*/ _interop_require_wildcard._(__webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\"));\nconst _headmanagercontextsharedruntime = __webpack_require__(/*! ../shared/lib/head-manager-context.shared-runtime */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/head-manager-context.shared-runtime.js\");\nconst _headmanager = __webpack_require__(/*! ./head-manager */ \"(app-pages-browser)/./node_modules/next/dist/client/head-manager.js\");\nconst _requestidlecallback = __webpack_require__(/*! ./request-idle-callback */ \"(app-pages-browser)/./node_modules/next/dist/client/request-idle-callback.js\");\nconst ScriptCache = new Map();\nconst LoadCache = new Set();\nconst ignoreProps = [\n    \"onLoad\",\n    \"onReady\",\n    \"dangerouslySetInnerHTML\",\n    \"children\",\n    \"onError\",\n    \"strategy\",\n    \"stylesheets\"\n];\nconst insertStylesheets = (stylesheets)=>{\n    // Case 1: Styles for afterInteractive/lazyOnload with appDir injected via handleClientScriptLoad\n    //\n    // Using ReactDOM.preinit to feature detect appDir and inject styles\n    // Stylesheets might have already been loaded if initialized with Script component\n    // Re-inject styles here to handle scripts loaded via handleClientScriptLoad\n    // ReactDOM.preinit handles dedup and ensures the styles are loaded only once\n    if (_reactdom.default.preinit) {\n        stylesheets.forEach((stylesheet)=>{\n            _reactdom.default.preinit(stylesheet, {\n                as: \"style\"\n            });\n        });\n        return;\n    }\n    // Case 2: Styles for afterInteractive/lazyOnload with pages injected via handleClientScriptLoad\n    //\n    // We use this function to load styles when appdir is not detected\n    // TODO: Use React float APIs to load styles once available for pages dir\n    if (true) {\n        let head = document.head;\n        stylesheets.forEach((stylesheet)=>{\n            let link = document.createElement(\"link\");\n            link.type = \"text/css\";\n            link.rel = \"stylesheet\";\n            link.href = stylesheet;\n            head.appendChild(link);\n        });\n    }\n};\nconst loadScript = (props)=>{\n    const { src, id, onLoad = ()=>{}, onReady = null, dangerouslySetInnerHTML, children = \"\", strategy = \"afterInteractive\", onError, stylesheets } = props;\n    const cacheKey = id || src;\n    // Script has already loaded\n    if (cacheKey && LoadCache.has(cacheKey)) {\n        return;\n    }\n    // Contents of this script are already loading/loaded\n    if (ScriptCache.has(src)) {\n        LoadCache.add(cacheKey);\n        // It is possible that multiple `next/script` components all have same \"src\", but has different \"onLoad\"\n        // This is to make sure the same remote script will only load once, but \"onLoad\" are executed in order\n        ScriptCache.get(src).then(onLoad, onError);\n        return;\n    }\n    /** Execute after the script first loaded */ const afterLoad = ()=>{\n        // Run onReady for the first time after load event\n        if (onReady) {\n            onReady();\n        }\n        // add cacheKey to LoadCache when load successfully\n        LoadCache.add(cacheKey);\n    };\n    const el = document.createElement(\"script\");\n    const loadPromise = new Promise((resolve, reject)=>{\n        el.addEventListener(\"load\", function(e) {\n            resolve();\n            if (onLoad) {\n                onLoad.call(this, e);\n            }\n            afterLoad();\n        });\n        el.addEventListener(\"error\", function(e) {\n            reject(e);\n        });\n    }).catch(function(e) {\n        if (onError) {\n            onError(e);\n        }\n    });\n    if (dangerouslySetInnerHTML) {\n        // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n        el.innerHTML = dangerouslySetInnerHTML.__html || \"\";\n        afterLoad();\n    } else if (children) {\n        el.textContent = typeof children === \"string\" ? children : Array.isArray(children) ? children.join(\"\") : \"\";\n        afterLoad();\n    } else if (src) {\n        el.src = src;\n        // do not add cacheKey into LoadCache for remote script here\n        // cacheKey will be added to LoadCache when it is actually loaded (see loadPromise above)\n        ScriptCache.set(src, loadPromise);\n    }\n    for (const [k, value] of Object.entries(props)){\n        if (value === undefined || ignoreProps.includes(k)) {\n            continue;\n        }\n        const attr = _headmanager.DOMAttributeNames[k] || k.toLowerCase();\n        el.setAttribute(attr, value);\n    }\n    if (strategy === \"worker\") {\n        el.setAttribute(\"type\", \"text/partytown\");\n    }\n    el.setAttribute(\"data-nscript\", strategy);\n    // Load styles associated with this script\n    if (stylesheets) {\n        insertStylesheets(stylesheets);\n    }\n    document.body.appendChild(el);\n};\nfunction handleClientScriptLoad(props) {\n    const { strategy = \"afterInteractive\" } = props;\n    if (strategy === \"lazyOnload\") {\n        window.addEventListener(\"load\", ()=>{\n            (0, _requestidlecallback.requestIdleCallback)(()=>loadScript(props));\n        });\n    } else {\n        loadScript(props);\n    }\n}\nfunction loadLazyScript(props) {\n    if (document.readyState === \"complete\") {\n        (0, _requestidlecallback.requestIdleCallback)(()=>loadScript(props));\n    } else {\n        window.addEventListener(\"load\", ()=>{\n            (0, _requestidlecallback.requestIdleCallback)(()=>loadScript(props));\n        });\n    }\n}\nfunction addBeforeInteractiveToCache() {\n    const scripts = [\n        ...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'),\n        ...document.querySelectorAll('[data-nscript=\"beforePageRender\"]')\n    ];\n    scripts.forEach((script)=>{\n        const cacheKey = script.id || script.getAttribute(\"src\");\n        LoadCache.add(cacheKey);\n    });\n}\nfunction initScriptLoader(scriptLoaderItems) {\n    scriptLoaderItems.forEach(handleClientScriptLoad);\n    addBeforeInteractiveToCache();\n}\nfunction Script(props) {\n    const { id, src = \"\", onLoad = ()=>{}, onReady = null, strategy = \"afterInteractive\", onError, stylesheets, ...restProps } = props;\n    // Context is available only during SSR\n    const { updateScripts, scripts, getIsSsr, appDir, nonce } = (0, _react.useContext)(_headmanagercontextsharedruntime.HeadManagerContext);\n    /**\n   * - First mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script hasn't loaded yet (not in LoadCache)\n   *      onReady is skipped, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. hasLoadScriptEffectCalled.current is false, loadScript executes\n   *      Once the script is loaded, the onLoad and onReady will be called by then\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   *\n   * - Second mount:\n   *   1. The useEffect for onReady executes\n   *   2. hasOnReadyEffectCalled.current is false, but the script has already loaded (found in LoadCache)\n   *      onReady is called, set hasOnReadyEffectCalled.current to true\n   *   3. The useEffect for loadScript executes\n   *   4. The script is already loaded, loadScript bails out\n   *   [If strict mode is enabled / is wrapped in <OffScreen /> component]\n   *   5. The useEffect for onReady executes again\n   *   6. hasOnReadyEffectCalled.current is true, so entire effect is skipped\n   *   7. The useEffect for loadScript executes again\n   *   8. hasLoadScriptEffectCalled.current is true, so entire effect is skipped\n   */ const hasOnReadyEffectCalled = (0, _react.useRef)(false);\n    (0, _react.useEffect)(()=>{\n        const cacheKey = id || src;\n        if (!hasOnReadyEffectCalled.current) {\n            // Run onReady if script has loaded before but component is re-mounted\n            if (onReady && cacheKey && LoadCache.has(cacheKey)) {\n                onReady();\n            }\n            hasOnReadyEffectCalled.current = true;\n        }\n    }, [\n        onReady,\n        id,\n        src\n    ]);\n    const hasLoadScriptEffectCalled = (0, _react.useRef)(false);\n    (0, _react.useEffect)(()=>{\n        if (!hasLoadScriptEffectCalled.current) {\n            if (strategy === \"afterInteractive\") {\n                loadScript(props);\n            } else if (strategy === \"lazyOnload\") {\n                loadLazyScript(props);\n            }\n            hasLoadScriptEffectCalled.current = true;\n        }\n    }, [\n        props,\n        strategy\n    ]);\n    if (strategy === \"beforeInteractive\" || strategy === \"worker\") {\n        if (updateScripts) {\n            scripts[strategy] = (scripts[strategy] || []).concat([\n                {\n                    id,\n                    src,\n                    onLoad,\n                    onReady,\n                    onError,\n                    ...restProps\n                }\n            ]);\n            updateScripts(scripts);\n        } else if (getIsSsr && getIsSsr()) {\n            // Script has already loaded during SSR\n            LoadCache.add(id || src);\n        } else if (getIsSsr && !getIsSsr()) {\n            loadScript(props);\n        }\n    }\n    // For the app directory, we need React Float to preload these scripts.\n    if (appDir) {\n        // Injecting stylesheets here handles beforeInteractive and worker scripts correctly\n        // For other strategies injecting here ensures correct stylesheet order\n        // ReactDOM.preinit handles loading the styles in the correct order,\n        // also ensures the stylesheet is loaded only once and in a consistent manner\n        //\n        // Case 1: Styles for beforeInteractive/worker with appDir - handled here\n        // Case 2: Styles for beforeInteractive/worker with pages dir - Not handled yet\n        // Case 3: Styles for afterInteractive/lazyOnload with appDir - handled here\n        // Case 4: Styles for afterInteractive/lazyOnload with pages dir - handled in insertStylesheets function\n        if (stylesheets) {\n            stylesheets.forEach((styleSrc)=>{\n                _reactdom.default.preinit(styleSrc, {\n                    as: \"style\"\n                });\n            });\n        }\n        // Before interactive scripts need to be loaded by Next.js' runtime instead\n        // of native <script> tags, because they no longer have `defer`.\n        if (strategy === \"beforeInteractive\") {\n            if (!src) {\n                // For inlined scripts, we put the content in `children`.\n                if (restProps.dangerouslySetInnerHTML) {\n                    // Casting since lib.dom.d.ts doesn't have TrustedHTML yet.\n                    restProps.children = restProps.dangerouslySetInnerHTML.__html;\n                    delete restProps.dangerouslySetInnerHTML;\n                }\n                return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"script\", {\n                    nonce: nonce,\n                    dangerouslySetInnerHTML: {\n                        __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([\n                            0,\n                            {\n                                ...restProps,\n                                id\n                            }\n                        ]) + \")\"\n                    }\n                });\n            } else {\n                // @ts-ignore\n                _reactdom.default.preload(src, restProps.integrity ? {\n                    as: \"script\",\n                    integrity: restProps.integrity\n                } : {\n                    as: \"script\"\n                });\n                return /*#__PURE__*/ (0, _jsxruntime.jsx)(\"script\", {\n                    nonce: nonce,\n                    dangerouslySetInnerHTML: {\n                        __html: \"(self.__next_s=self.__next_s||[]).push(\" + JSON.stringify([\n                            src,\n                            {\n                                ...restProps,\n                                id\n                            }\n                        ]) + \")\"\n                    }\n                });\n            }\n        } else if (strategy === \"afterInteractive\") {\n            if (src) {\n                // @ts-ignore\n                _reactdom.default.preload(src, restProps.integrity ? {\n                    as: \"script\",\n                    integrity: restProps.integrity\n                } : {\n                    as: \"script\"\n                });\n            }\n        }\n    }\n    return null;\n}\n_c = Script;\nObject.defineProperty(Script, \"__nextScript\", {\n    value: true\n});\nconst _default = Script;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=script.js.map\nvar _c;\n$RefreshReg$(_c, \"Script\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/client/script.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js ***!
  \**********************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/* __next_internal_client_entry_do_not_use__  cjs */ \nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"BailoutToCSR\", ({\n    enumerable: true,\n    get: function() {\n        return BailoutToCSR;\n    }\n}));\nconst _bailouttocsr = __webpack_require__(/*! ./bailout-to-csr */ \"(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/bailout-to-csr.js\");\nfunction BailoutToCSR(param) {\n    let { reason, children } = param;\n    if (false) {}\n    return children;\n} //# sourceMappingURL=dynamic-bailout-to-csr.js.map\n_c = BailoutToCSR;\nvar _c;\n$RefreshReg$(_c, \"BailoutToCSR\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3Qvc2hhcmVkL2xpYi9sYXp5LWR5bmFtaWMvZHluYW1pYy1iYWlsb3V0LXRvLWNzci5qcyIsIm1hcHBpbmdzIjoicURBRWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPO0FBQ1gsQ0FBQyxFQUFDO0FBQ0ZILGdEQUErQztJQUMzQ0ksWUFBWTtJQUNaQyxLQUFLO1FBQ0QsT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLGdCQUFnQkMsbUJBQU9BLENBQUMsZ0hBQWtCO0FBQ2hELFNBQVNGLGFBQWFHLEtBQUs7SUFDdkIsSUFBSSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRSxHQUFHRjtJQUMzQixJQUFJLEtBQTZCLEVBQUUsRUFFbEM7SUFDRCxPQUFPRTtBQUNYLEVBRUEsa0RBQWtEO0tBUnpDTCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L3NoYXJlZC9saWIvbGF6eS1keW5hbWljL2R5bmFtaWMtYmFpbG91dC10by1jc3IuanM/ZjY5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBjbGllbnRcIjtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJCYWlsb3V0VG9DU1JcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEJhaWxvdXRUb0NTUjtcbiAgICB9XG59KTtcbmNvbnN0IF9iYWlsb3V0dG9jc3IgPSByZXF1aXJlKFwiLi9iYWlsb3V0LXRvLWNzclwiKTtcbmZ1bmN0aW9uIEJhaWxvdXRUb0NTUihwYXJhbSkge1xuICAgIGxldCB7IHJlYXNvbiwgY2hpbGRyZW4gfSA9IHBhcmFtO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBfYmFpbG91dHRvY3NyLkJhaWxvdXRUb0NTUkVycm9yKHJlYXNvbik7XG4gICAgfVxuICAgIHJldHVybiBjaGlsZHJlbjtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHluYW1pYy1iYWlsb3V0LXRvLWNzci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiQmFpbG91dFRvQ1NSIiwiX2JhaWxvdXR0b2NzciIsInJlcXVpcmUiLCJwYXJhbSIsInJlYXNvbiIsImNoaWxkcmVuIiwiQmFpbG91dFRvQ1NSRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fcomponents%2FSpeechSetup.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fapp%2Fpage.client.tsx&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fclient%2Fscript.js&modules=%2FUsers%2Fsantoshbaral%2FDocuments%2FREVX%2Fhelpdex%2Fspu-ai%2Fnode_modules%2Fnext%2Fdist%2Fshared%2Flib%2Flazy-dynamic%2Fdynamic-bailout-to-csr.js&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);